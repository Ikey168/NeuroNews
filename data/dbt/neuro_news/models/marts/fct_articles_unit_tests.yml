version: 2

unit_tests:
  # Test date dimension derivation from created_at
  - name: fct_articles_date_derivation
    model: fct_articles
    description: "Test that date dimensions are correctly derived from created_at timestamp"
    given:
      - input: ref('stg_postgres__articles_demo')
        rows:
          - id: 1
            title: "Test Article"
            content: "Test content for date derivation"
            url: "https://example.com/test"
            source: "test_source"
            sentiment: "positive"
            created_at: "2025-08-01T12:34:00"
            updated_at: "2025-08-01T12:34:00"
            scraped_at: "2025-08-01T12:34:00"
            is_content_empty: false
            is_title_empty: false
            content_length: 35
            title_length: 12
            dbt_processed_at: "2025-08-01T12:34:00"
    expect:
      rows:
        - id: 1
          created_date_key: "2025-08-01"
          created_year: 2025
          created_month: 8
          created_day: 1
          created_hour: 12

  # Test content categorization logic
  - name: fct_articles_content_categorization
    model: fct_articles
    description: "Test that content is correctly categorized by length"
    given:
      - input: ref('stg_postgres__articles_demo')
        rows:
          - id: 1
            title: "Short"
            content: "Short content"  # 13 chars < 500
            url: "https://example.com/short"
            source: "test"
            sentiment: "neutral"
            created_at: "2025-08-01T00:00:00"
            updated_at: "2025-08-01T00:00:00"
            scraped_at: "2025-08-01T00:00:00"
            is_content_empty: false
            is_title_empty: false
            content_length: 13
            title_length: 5
            dbt_processed_at: "2025-08-01T00:00:00"
          - id: 2
            title: "Medium Article"
            content: "This is medium content"
            url: "https://example.com/medium"
            source: "test"
            sentiment: "neutral"
            created_at: "2025-08-01T00:00:00"
            updated_at: "2025-08-01T00:00:00"
            scraped_at: "2025-08-01T00:00:00"
            is_content_empty: false
            is_title_empty: false
            content_length: 1000
            title_length: 14
            dbt_processed_at: "2025-08-01T00:00:00"
          - id: 3
            title: "Long Article"
            content: "This is long content"
            url: "https://example.com/long"
            source: "test"
            sentiment: "neutral"
            created_at: "2025-08-01T00:00:00"
            updated_at: "2025-08-01T00:00:00"
            scraped_at: "2025-08-01T00:00:00"
            is_content_empty: false
            is_title_empty: false
            content_length: 3000
            title_length: 12
            dbt_processed_at: "2025-08-01T00:00:00"
    expect:
      rows:
        - id: 1
          content_category: "short"
        - id: 2
          content_category: "medium"
        - id: 3
          content_category: "long"

  # Test sentiment flags derivation
  - name: fct_articles_sentiment_flags
    model: fct_articles
    description: "Test that sentiment flags are correctly derived from sentiment field"
    given:
      - input: ref('stg_postgres__articles_demo')
        rows:
          - id: 1
            title: "Positive Article"
            content: "Great news content"
            url: "https://example.com/pos"
            source: "test"
            sentiment: "positive"
            created_at: "2025-08-01T00:00:00"
            updated_at: "2025-08-01T00:00:00"
            scraped_at: "2025-08-01T00:00:00"
            is_content_empty: false
            is_title_empty: false
            content_length: 18
            title_length: 16
            dbt_processed_at: "2025-08-01T00:00:00"
          - id: 2
            title: "Negative Article"
            content: "Bad news content"
            url: "https://example.com/neg"
            source: "test"
            sentiment: "negative"
            created_at: "2025-08-01T00:00:00"
            updated_at: "2025-08-01T00:00:00"
            scraped_at: "2025-08-01T00:00:00"
            is_content_empty: false
            is_title_empty: false
            content_length: 16
            title_length: 16
            dbt_processed_at: "2025-08-01T00:00:00"
          - id: 3
            title: "Neutral Article"
            content: "Neutral news content"
            url: "https://example.com/neu"
            source: "test"
            sentiment: "neutral"
            created_at: "2025-08-01T00:00:00"
            updated_at: "2025-08-01T00:00:00"
            scraped_at: "2025-08-01T00:00:00"
            is_content_empty: false
            is_title_empty: false
            content_length: 20
            title_length: 15
            dbt_processed_at: "2025-08-01T00:00:00"
    expect:
      rows:
        - id: 1
          sentiment: "positive"
          is_positive: 1
          is_negative: 0
          is_neutral: 0
        - id: 2
          sentiment: "negative"
          is_positive: 0
          is_negative: 1
          is_neutral: 0
        - id: 3
          sentiment: "neutral"
          is_positive: 0
          is_negative: 0
          is_neutral: 1

  # Test data validation - invalid sentiment should be handled
  - name: fct_articles_invalid_sentiment_handling
    model: fct_articles
    description: "Test that invalid sentiment values are properly handled by staging layer"
    given:
      - input: ref('stg_postgres__articles_demo')
        rows:
          - id: 1
            title: "Invalid Sentiment"
            content: "Content with invalid sentiment"
            url: "https://example.com/invalid"
            source: "test"
            sentiment: null  # Invalid sentiment should result in null flags
            created_at: "2025-08-01T00:00:00"
            updated_at: "2025-08-01T00:00:00"
            scraped_at: "2025-08-01T00:00:00"
            is_content_empty: false
            is_title_empty: false
            content_length: 32
            title_length: 17
            dbt_processed_at: "2025-08-01T00:00:00"
    expect:
      rows:
        - id: 1
          sentiment: null
          is_positive: 0
          is_negative: 0
          is_neutral: 0

  # Test edge cases for content length boundaries
  - name: fct_articles_content_boundary_cases
    model: fct_articles
    description: "Test content categorization at exact boundary values"
    given:
      - input: ref('stg_postgres__articles_demo')
        rows:
          - id: 1
            title: "Boundary Test"
            content: "Short content"
            url: "https://example.com/b499"
            source: "test"
            sentiment: "neutral"
            created_at: "2025-08-01T00:00:00"
            updated_at: "2025-08-01T00:00:00"
            scraped_at: "2025-08-01T00:00:00"
            is_content_empty: false
            is_title_empty: false
            content_length: 499
            title_length: 13
            dbt_processed_at: "2025-08-01T00:00:00"
          - id: 2
            title: "Boundary Test"
            content: "Medium content"
            url: "https://example.com/b500"
            source: "test"
            sentiment: "neutral"
            created_at: "2025-08-01T00:00:00"
            updated_at: "2025-08-01T00:00:00"
            scraped_at: "2025-08-01T00:00:00"
            is_content_empty: false
            is_title_empty: false
            content_length: 500
            title_length: 13
            dbt_processed_at: "2025-08-01T00:00:00"
          - id: 3
            title: "Boundary Test"
            content: "Long content"
            url: "https://example.com/b2000"
            source: "test"
            sentiment: "neutral"
            created_at: "2025-08-01T00:00:00"
            updated_at: "2025-08-01T00:00:00"
            scraped_at: "2025-08-01T00:00:00"
            is_content_empty: false
            is_title_empty: false
            content_length: 2000
            title_length: 12
            dbt_processed_at: "2025-08-01T00:00:00"
    expect:
      rows:
        - id: 1
          content_category: "short"
        - id: 2
          content_category: "medium"
        - id: 3
          content_category: "long"
