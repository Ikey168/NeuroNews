# Docker Compose Services for Spark + Iceberg Setup
# This file provides the required services for Spark Iceberg integration

version: '3.8'

services:
  # MinIO - S3-compatible object storage
  minio:
    image: minio/minio:RELEASE.2024-01-16T16-07-38Z
    container_name: iceberg-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=minio
      - MINIO_ROOT_PASSWORD=minio123
      - MINIO_DOMAIN=minio
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - iceberg-net

  # MinIO Client - for initial bucket setup
  minio-setup:
    image: minio/mc:RELEASE.2024-01-13T08-44-48Z
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set minio http://minio:9000 minio minio123;
      /usr/bin/mc mb minio/warehouse --ignore-existing;
      /usr/bin/mc policy set public minio/warehouse;
      echo 'MinIO warehouse bucket created successfully';
      "
    networks:
      - iceberg-net

  # PostgreSQL - for Iceberg REST catalog metadata
  postgres:
    image: postgres:15-alpine
    container_name: iceberg-postgres
    environment:
      - POSTGRES_USER=iceberg
      - POSTGRES_PASSWORD=iceberg123
      - POSTGRES_DB=iceberg_catalog
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U iceberg -d iceberg_catalog"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - iceberg-net

  # Iceberg REST Catalog
  iceberg-rest:
    image: tabulario/iceberg-rest:0.9.0
    container_name: iceberg-rest-catalog
    ports:
      - "8181:8181"
    environment:
      - CATALOG_WAREHOUSE=s3a://warehouse
      - CATALOG_IO__IMPL=org.apache.iceberg.aws.s3.S3FileIO
      - CATALOG_S3_ENDPOINT=http://minio:9000
      - CATALOG_S3_ACCESS__KEY__ID=minio
      - CATALOG_S3_SECRET__ACCESS__KEY=minio123
      - CATALOG_S3_PATH__STYLE__ACCESS=true
      - CATALOG_JDBC_URL=jdbc:postgresql://postgres:5432/iceberg_catalog
      - CATALOG_JDBC_USER=iceberg
      - CATALOG_JDBC_PASSWORD=iceberg123
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8181/v1/config"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - iceberg-net

  # Spark Master (optional for cluster mode)
  spark-master:
    image: bitnami/spark:3.5.0
    container_name: spark-master
    ports:
      - "8080:8080"
      - "7077:7077"
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    volumes:
      - ./spark/conf:/opt/bitnami/spark/conf
      - ./data:/data
    networks:
      - iceberg-net

  # Spark Worker (optional for cluster mode)
  spark-worker:
    image: bitnami/spark:3.5.0
    container_name: spark-worker
    ports:
      - "8081:8081"
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=1G
      - SPARK_WORKER_CORES=1
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    volumes:
      - ./spark/conf:/opt/bitnami/spark/conf
      - ./data:/data
    depends_on:
      - spark-master
    networks:
      - iceberg-net

  # Jupyter Notebook with PySpark and Iceberg (optional for interactive development)
  jupyter:
    image: jupyter/pyspark-notebook:spark-3.5.0
    container_name: spark-jupyter
    ports:
      - "8888:8888"
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - SPARK_OPTS="--conf spark.sql.extensions=org.apache.iceberg.spark.extensions.IcebergSparkSessionExtensions --conf spark.sql.catalog.demo=org.apache.iceberg.spark.SparkCatalog --conf spark.sql.catalog.demo.type=rest --conf spark.sql.catalog.demo.uri=http://iceberg-rest:8181"
    volumes:
      - ./notebooks:/home/jovyan/work
      - ./spark/conf:/usr/local/spark/conf
    networks:
      - iceberg-net

volumes:
  minio_data:
    driver: local
  postgres_data:
    driver: local

networks:
  iceberg-net:
    driver: bridge
