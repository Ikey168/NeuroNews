---
# AWS Infrastructure Provisioning Tasks
# Provisions EC2 instances, VPC, security groups, and load balancers

- name: Create VPC for NeuroNews
  amazon.aws.ec2_vpc_net:
    name: "neuronews-vpc"
    cidr_block: "10.0.0.0/16"
    region: "{{ region }}"
    state: "{{ infrastructure_state }}"
    tags:
      Environment: "{{ app.environment }}"
      Project: "NeuroNews"
      ManagedBy: "Ansible"
  register: vpc_result

- name: Create public subnet for Kubernetes masters
  amazon.aws.ec2_vpc_subnet:
    vpc_id: "{{ vpc_result.vpc.id }}"
    cidr: "10.0.1.0/24"
    region: "{{ region }}"
    availability_zone: "{{ region }}a"
    state: "{{ infrastructure_state }}"
    map_public: yes
    tags:
      Name: "neuronews-public-subnet-1"
      Environment: "{{ app.environment }}"
      Type: "public"
  register: public_subnet_1

- name: Create public subnet for Kubernetes workers
  amazon.aws.ec2_vpc_subnet:
    vpc_id: "{{ vpc_result.vpc.id }}"
    cidr: "10.0.2.0/24"
    region: "{{ region }}"
    availability_zone: "{{ region }}b"
    state: "{{ infrastructure_state }}"
    map_public: yes
    tags:
      Name: "neuronews-public-subnet-2"
      Environment: "{{ app.environment }}"
      Type: "public"
  register: public_subnet_2

- name: Create private subnet for databases
  amazon.aws.ec2_vpc_subnet:
    vpc_id: "{{ vpc_result.vpc.id }}"
    cidr: "10.0.3.0/24"
    region: "{{ region }}"
    availability_zone: "{{ region }}c"
    state: "{{ infrastructure_state }}"
    tags:
      Name: "neuronews-private-subnet"
      Environment: "{{ app.environment }}"
      Type: "private"
  register: private_subnet

- name: Create Internet Gateway
  amazon.aws.ec2_vpc_igw:
    vpc_id: "{{ vpc_result.vpc.id }}"
    region: "{{ region }}"
    state: "{{ infrastructure_state }}"
    tags:
      Name: "neuronews-igw"
      Environment: "{{ app.environment }}"
  register: igw_result

- name: Create route table for public subnets
  amazon.aws.ec2_vpc_route_table:
    vpc_id: "{{ vpc_result.vpc.id }}"
    region: "{{ region }}"
    state: "{{ infrastructure_state }}"
    tags:
      Name: "neuronews-public-rt"
      Environment: "{{ app.environment }}"
    subnets:
      - "{{ public_subnet_1.subnet.id }}"
      - "{{ public_subnet_2.subnet.id }}"
    routes:
      - dest: "0.0.0.0/0"
        gateway_id: "{{ igw_result.gateway_id }}"

- name: Create security group for Kubernetes masters
  amazon.aws.ec2_security_group:
    name: "neuronews-k8s-masters"
    description: "Security group for Kubernetes master nodes"
    vpc_id: "{{ vpc_result.vpc.id }}"
    region: "{{ region }}"
    state: "{{ infrastructure_state }}"
    rules:
      - proto: tcp
        ports:
          - 22
        cidr_ip: "0.0.0.0/0"
        rule_desc: "SSH access"
      - proto: tcp
        ports:
          - 6443
        cidr_ip: "10.0.0.0/16"
        rule_desc: "Kubernetes API server"
      - proto: tcp
        ports:
          - 2379
          - 2380
        cidr_ip: "10.0.0.0/16"
        rule_desc: "etcd server client API"
      - proto: tcp
        ports:
          - 10250
        cidr_ip: "10.0.0.0/16"
        rule_desc: "Kubelet API"
      - proto: tcp
        ports:
          - 10259
        cidr_ip: "10.0.0.0/16"
        rule_desc: "kube-scheduler"
      - proto: tcp
        ports:
          - 10257
        cidr_ip: "10.0.0.0/16"
        rule_desc: "kube-controller-manager"
      - proto: tcp
        ports:
          - 80
          - 443
        cidr_ip: "0.0.0.0/0"
        rule_desc: "HTTP/HTTPS for applications"
      - proto: tcp
        ports:
          - 30000
          - 32767
        cidr_ip: "0.0.0.0/0"
        rule_desc: "NodePort services"
    tags:
      Environment: "{{ app.environment }}"
      Project: "NeuroNews"
  register: masters_sg

- name: Create security group for Kubernetes workers
  amazon.aws.ec2_security_group:
    name: "neuronews-k8s-workers"
    description: "Security group for Kubernetes worker nodes"
    vpc_id: "{{ vpc_result.vpc.id }}"
    region: "{{ region }}"
    state: "{{ infrastructure_state }}"
    rules:
      - proto: tcp
        ports:
          - 22
        cidr_ip: "0.0.0.0/0"
        rule_desc: "SSH access"
      - proto: tcp
        ports:
          - 10250
        cidr_ip: "10.0.0.0/16"
        rule_desc: "Kubelet API"
      - proto: tcp
        ports:
          - 30000
          - 32767
        cidr_ip: "0.0.0.0/0"
        rule_desc: "NodePort services"
      - proto: tcp
        ports:
          - 80
          - 443
        cidr_ip: "0.0.0.0/0"
        rule_desc: "HTTP/HTTPS for applications"
    tags:
      Environment: "{{ app.environment }}"
      Project: "NeuroNews"
  register: workers_sg

- name: Launch Kubernetes master instances
  amazon.aws.ec2_instance:
    name: "neuronews-k8s-master-{{ item }}"
    image_id: "ami-0c7217cdde317cfec"  # Ubuntu 22.04 LTS
    instance_type: "t3.medium"
    key_name: "neuronews-key"
    vpc_subnet_id: "{{ public_subnet_1.subnet.id }}"
    security_groups:
      - "{{ masters_sg.group_id }}"
    region: "{{ region }}"
    state: "{{ infrastructure_state }}"
    wait: yes
    wait_timeout: 600
    volumes:
      - device_name: "/dev/sda1"
        ebs:
          volume_type: "gp3"
          volume_size: 20
          delete_on_termination: true
    tags:
      Environment: "{{ app.environment }}"
      Project: "NeuroNews"
      Role: "k8s-master"
      Node: "master-{{ item }}"
  loop:
    - 1
    - 2
    - 3
  register: master_instances

- name: Launch Kubernetes worker instances
  amazon.aws.ec2_instance:
    name: "neuronews-k8s-worker-{{ item }}"
    image_id: "ami-0c7217cdde317cfec"  # Ubuntu 22.04 LTS
    instance_type: "t3.large"
    key_name: "neuronews-key"
    vpc_subnet_id: "{{ public_subnet_2.subnet.id }}"
    security_groups:
      - "{{ workers_sg.group_id }}"
    region: "{{ region }}"
    state: "{{ infrastructure_state }}"
    wait: yes
    wait_timeout: 600
    volumes:
      - device_name: "/dev/sda1"
        ebs:
          volume_type: "gp3"
          volume_size: 30
          delete_on_termination: true
    tags:
      Environment: "{{ app.environment }}"
      Project: "NeuroNews"
      Role: "k8s-worker"
      Node: "worker-{{ item }}"
  loop:
    - 1
    - 2
    - 3
  register: worker_instances

- name: Create Application Load Balancer
  amazon.aws.elb_application_lb:
    name: "neuronews-alb"
    security_groups:
      - "{{ masters_sg.group_id }}"
    subnets:
      - "{{ public_subnet_1.subnet.id }}"
      - "{{ public_subnet_2.subnet.id }}"
    region: "{{ region }}"
    state: "{{ infrastructure_state }}"
    tags:
      Environment: "{{ app.environment }}"
      Project: "NeuroNews"
  register: alb_result

- name: Wait for instances to be ready
  amazon.aws.ec2_instance_info:
    region: "{{ region }}"
    filters:
      "tag:Project": "NeuroNews"
      "tag:Environment": "{{ app.environment }}"
      instance-state-name: running
  register: running_instances
  until: running_instances.instances | length == 6
  retries: 30
  delay: 10

- name: Update dynamic inventory with AWS instances
  lineinfile:
    path: "{{ playbook_dir }}/inventories/aws-dynamic-hosts"
    create: yes
    line: |
      [masters]
      {% for instance in master_instances.results %}
      {{ instance.instances[0].tags.Name }} ansible_host={{ instance.instances[0].public_ip_address }} ansible_user=ubuntu
      {% endfor %}
      
      [workers]
      {% for instance in worker_instances.results %}
      {{ instance.instances[0].tags.Name }} ansible_host={{ instance.instances[0].public_ip_address }} ansible_user=ubuntu
      {% endfor %}
      
      [kubernetes:children]
      masters
      workers
  when: infrastructure_state == "present"

- name: Display AWS infrastructure information
  debug:
    msg: |
      AWS Infrastructure Created Successfully!
      ==========================================
      VPC ID: {{ vpc_result.vpc.id }}
      Region: {{ region }}
      
      Master Instances:
      {% for instance in master_instances.results %}
      - {{ instance.instances[0].tags.Name }}: {{ instance.instances[0].public_ip_address }}
      {% endfor %}
      
      Worker Instances:
      {% for instance in worker_instances.results %}
      - {{ instance.instances[0].tags.Name }}: {{ instance.instances[0].public_ip_address }}
      {% endfor %}
      
      Load Balancer: {{ alb_result.dns_name if alb_result.dns_name is defined else 'Not created' }}
      
      Next: Proceed with base configuration...
