---
# GCP Infrastructure Provisioning Tasks
# Provisions GCE instances, VPC, firewall rules, and load balancers

- name: Create VPC network for NeuroNews
  google.cloud.gcp_compute_network:
    name: "neuronews-vpc"
    auto_create_subnetworks: false
    project: "{{ gcp_project }}"
    auth_kind: "{{ gcp_auth_kind | default('serviceaccount') }}"
    service_account_file: "{{ gcp_service_account_file | default('') }}"
    state: "{{ infrastructure_state }}"
  register: vpc_network

- name: Create subnet for Kubernetes cluster
  google.cloud.gcp_compute_subnetwork:
    name: "neuronews-k8s-subnet"
    network: "{{ vpc_network }}"
    ip_cidr_range: "10.0.0.0/16"
    region: "{{ region }}"
    project: "{{ gcp_project }}"
    auth_kind: "{{ gcp_auth_kind | default('serviceaccount') }}"
    service_account_file: "{{ gcp_service_account_file | default('') }}"
    state: "{{ infrastructure_state }}"
  register: k8s_subnet

- name: Create firewall rule for SSH
  google.cloud.gcp_compute_firewall:
    name: "neuronews-allow-ssh"
    network: "{{ vpc_network }}"
    allowed:
      - ip_protocol: tcp
        ports:
          - "22"
    source_ranges:
      - "0.0.0.0/0"
    target_tags:
      - "neuronews-k8s"
    project: "{{ gcp_project }}"
    auth_kind: "{{ gcp_auth_kind | default('serviceaccount') }}"
    service_account_file: "{{ gcp_service_account_file | default('') }}"
    state: "{{ infrastructure_state }}"

- name: Create firewall rule for Kubernetes API
  google.cloud.gcp_compute_firewall:
    name: "neuronews-allow-k8s-api"
    network: "{{ vpc_network }}"
    allowed:
      - ip_protocol: tcp
        ports:
          - "6443"
    source_ranges:
      - "10.0.0.0/16"
    target_tags:
      - "neuronews-k8s-master"
    project: "{{ gcp_project }}"
    auth_kind: "{{ gcp_auth_kind | default('serviceaccount') }}"
    service_account_file: "{{ gcp_service_account_file | default('') }}"
    state: "{{ infrastructure_state }}"

- name: Create firewall rule for Kubernetes internal communication
  google.cloud.gcp_compute_firewall:
    name: "neuronews-allow-k8s-internal"
    network: "{{ vpc_network }}"
    allowed:
      - ip_protocol: tcp
        ports:
          - "2379-2380"  # etcd
          - "10250"      # kubelet
          - "10251"      # kube-scheduler
          - "10252"      # kube-controller-manager
          - "10255"      # kubelet read-only
    source_ranges:
      - "10.0.0.0/16"
    target_tags:
      - "neuronews-k8s"
    project: "{{ gcp_project }}"
    auth_kind: "{{ gcp_auth_kind | default('serviceaccount') }}"
    service_account_file: "{{ gcp_service_account_file | default('') }}"
    state: "{{ infrastructure_state }}"

- name: Create firewall rule for HTTP/HTTPS
  google.cloud.gcp_compute_firewall:
    name: "neuronews-allow-http-https"
    network: "{{ vpc_network }}"
    allowed:
      - ip_protocol: tcp
        ports:
          - "80"
          - "443"
          - "30000-32767"  # NodePort range
    source_ranges:
      - "0.0.0.0/0"
    target_tags:
      - "neuronews-k8s"
    project: "{{ gcp_project }}"
    auth_kind: "{{ gcp_auth_kind | default('serviceaccount') }}"
    service_account_file: "{{ gcp_service_account_file | default('') }}"
    state: "{{ infrastructure_state }}"

- name: Create Kubernetes master instances
  google.cloud.gcp_compute_instance:
    name: "neuronews-k8s-master-{{ item }}"
    machine_type: "e2-standard-2"
    zone: "{{ region }}-a"
    project: "{{ gcp_project }}"
    auth_kind: "{{ gcp_auth_kind | default('serviceaccount') }}"
    service_account_file: "{{ gcp_service_account_file | default('') }}"
    state: "{{ infrastructure_state }}"
    boot_disk:
      auto_delete: true
      boot: true
      initialize_params:
        source_image: "projects/ubuntu-os-cloud/global/images/family/ubuntu-2204-lts"
        disk_size_gb: 20
        disk_type: "pd-standard"
    network_interfaces:
      - network: "{{ vpc_network }}"
        subnetwork: "{{ k8s_subnet }}"
        access_configs:
          - name: "External NAT"
            type: "ONE_TO_ONE_NAT"
    tags:
      items:
        - "neuronews-k8s"
        - "neuronews-k8s-master"
    metadata:
      ssh-keys: "ubuntu:{{ lookup('file', '~/.ssh/id_rsa.pub') }}"
    labels:
      environment: "{{ app.environment }}"
      project: "neuronews"
      role: "k8s-master"
  loop:
    - 1
    - 2
    - 3
  register: master_instances

- name: Create Kubernetes worker instances
  google.cloud.gcp_compute_instance:
    name: "neuronews-k8s-worker-{{ item }}"
    machine_type: "e2-standard-4"
    zone: "{{ region }}-b"
    project: "{{ gcp_project }}"
    auth_kind: "{{ gcp_auth_kind | default('serviceaccount') }}"
    service_account_file: "{{ gcp_service_account_file | default('') }}"
    state: "{{ infrastructure_state }}"
    boot_disk:
      auto_delete: true
      boot: true
      initialize_params:
        source_image: "projects/ubuntu-os-cloud/global/images/family/ubuntu-2204-lts"
        disk_size_gb: 30
        disk_type: "pd-standard"
    network_interfaces:
      - network: "{{ vpc_network }}"
        subnetwork: "{{ k8s_subnet }}"
        access_configs:
          - name: "External NAT"
            type: "ONE_TO_ONE_NAT"
    tags:
      items:
        - "neuronews-k8s"
        - "neuronews-k8s-worker"
    metadata:
      ssh-keys: "ubuntu:{{ lookup('file', '~/.ssh/id_rsa.pub') }}"
    labels:
      environment: "{{ app.environment }}"
      project: "neuronews"
      role: "k8s-worker"
  loop:
    - 1
    - 2
    - 3
  register: worker_instances

- name: Create health check for load balancer
  google.cloud.gcp_compute_health_check:
    name: "neuronews-health-check"
    type: "HTTP"
    http_health_check:
      port: 30000
      request_path: "/health"
    project: "{{ gcp_project }}"
    auth_kind: "{{ gcp_auth_kind | default('serviceaccount') }}"
    service_account_file: "{{ gcp_service_account_file | default('') }}"
    state: "{{ infrastructure_state }}"
  register: health_check

- name: Create instance group for masters
  google.cloud.gcp_compute_instance_group:
    name: "neuronews-masters-ig"
    zone: "{{ region }}-a"
    instances:
      - "{{ master_instances.results[0].selfLink }}"
      - "{{ master_instances.results[1].selfLink }}"
      - "{{ master_instances.results[2].selfLink }}"
    project: "{{ gcp_project }}"
    auth_kind: "{{ gcp_auth_kind | default('serviceaccount') }}"
    service_account_file: "{{ gcp_service_account_file | default('') }}"
    state: "{{ infrastructure_state }}"
  register: masters_ig

- name: Create backend service
  google.cloud.gcp_compute_backend_service:
    name: "neuronews-backend-service"
    backends:
      - group: "{{ masters_ig.selfLink }}"
        balancing_mode: "UTILIZATION"
        max_utilization: 0.8
    health_checks:
      - "{{ health_check.selfLink }}"
    project: "{{ gcp_project }}"
    auth_kind: "{{ gcp_auth_kind | default('serviceaccount') }}"
    service_account_file: "{{ gcp_service_account_file | default('') }}"
    state: "{{ infrastructure_state }}"
  register: backend_service

- name: Create URL map
  google.cloud.gcp_compute_url_map:
    name: "neuronews-url-map"
    default_service: "{{ backend_service.selfLink }}"
    project: "{{ gcp_project }}"
    auth_kind: "{{ gcp_auth_kind | default('serviceaccount') }}"
    service_account_file: "{{ gcp_service_account_file | default('') }}"
    state: "{{ infrastructure_state }}"
  register: url_map

- name: Create HTTP(S) proxy
  google.cloud.gcp_compute_target_http_proxy:
    name: "neuronews-http-proxy"
    url_map: "{{ url_map.selfLink }}"
    project: "{{ gcp_project }}"
    auth_kind: "{{ gcp_auth_kind | default('serviceaccount') }}"
    service_account_file: "{{ gcp_service_account_file | default('') }}"
    state: "{{ infrastructure_state }}"
  register: http_proxy

- name: Create global forwarding rule
  google.cloud.gcp_compute_global_forwarding_rule:
    name: "neuronews-forwarding-rule"
    ip_protocol: "TCP"
    port_range: "80"
    target: "{{ http_proxy.selfLink }}"
    project: "{{ gcp_project }}"
    auth_kind: "{{ gcp_auth_kind | default('serviceaccount') }}"
    service_account_file: "{{ gcp_service_account_file | default('') }}"
    state: "{{ infrastructure_state }}"
  register: forwarding_rule

- name: Update dynamic inventory with GCP instances
  lineinfile:
    path: "{{ playbook_dir }}/inventories/gcp-dynamic-hosts"
    create: yes
    line: |
      [masters]
      {% for instance in master_instances.results %}
      {{ instance.name }} ansible_host={{ instance.network_interfaces[0].access_configs[0].nat_ip }} ansible_user=ubuntu
      {% endfor %}
      
      [workers]
      {% for instance in worker_instances.results %}
      {{ instance.name }} ansible_host={{ instance.network_interfaces[0].access_configs[0].nat_ip }} ansible_user=ubuntu
      {% endfor %}
      
      [kubernetes:children]
      masters
      workers
  when: infrastructure_state == "present"

- name: Display GCP infrastructure information
  debug:
    msg: |
      GCP Infrastructure Created Successfully!
      ======================================
      VPC Network: {{ vpc_network.name }}
      Region: {{ region }}
      
      Master Instances:
      {% for instance in master_instances.results %}
      - {{ instance.name }}: {{ instance.network_interfaces[0].access_configs[0].nat_ip }}
      {% endfor %}
      
      Worker Instances:
      {% for instance in worker_instances.results %}
      - {{ instance.name }}: {{ instance.network_interfaces[0].access_configs[0].nat_ip }}
      {% endfor %}
      
      Load Balancer IP: {{ forwarding_rule.ip_address if forwarding_rule.ip_address is defined else 'Not created' }}
      
      Next: Proceed with base configuration...
