---
# Kubernetes Cluster Initialization Tasks
# Initializes the Kubernetes cluster and sets up networking

- name: Check if cluster is already initialized
  stat:
    path: /etc/kubernetes/admin.conf
  register: k8s_admin_conf

- name: Initialize Kubernetes cluster
  command: |
    kubeadm init \
      --kubernetes-version={{ kubernetes_version }} \
      --apiserver-advertise-address={{ ansible_default_ipv4.address }} \
      --apiserver-bind-port={{ kubernetes_api_server_port }} \
      --pod-network-cidr={{ kubernetes_pod_network_cidr }} \
      --service-cidr={{ kubernetes_service_cidr }} \
      --cluster-name={{ kubernetes_cluster_name }} \
      --control-plane-endpoint={{ hostvars[groups['masters'][0]]['ansible_default_ipv4']['address'] }}:{{ kubernetes_api_server_port }} \
      --upload-certs \
      --skip-phases=addon/kube-proxy
  register: kubeadm_init
  when: not k8s_admin_conf.stat.exists
  failed_when: kubeadm_init.rc != 0

- name: Create kubectl directory for root
  file:
    path: /root/.kube
    state: directory
    mode: '0755'
  when: not k8s_admin_conf.stat.exists

- name: Copy kubectl config for root
  copy:
    src: /etc/kubernetes/admin.conf
    dest: /root/.kube/config
    remote_src: yes
    mode: '0644'
  when: not k8s_admin_conf.stat.exists

- name: Create kubectl directory for ansible user
  file:
    path: "/home/{{ ansible_user }}/.kube"
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0755'
  when: not k8s_admin_conf.stat.exists

- name: Copy kubectl config for ansible user
  copy:
    src: /etc/kubernetes/admin.conf
    dest: "/home/{{ ansible_user }}/.kube/config"
    remote_src: yes
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0644'
  when: not k8s_admin_conf.stat.exists

- name: Extract join command for master nodes
  shell: kubeadm token create --print-join-command --certificate-key $(kubeadm init phase upload-certs --upload-certs 2>/dev/null | tail -n 1)
  register: master_join_command
  when: not k8s_admin_conf.stat.exists

- name: Extract join command for worker nodes
  shell: kubeadm token create --print-join-command
  register: worker_join_command
  when: not k8s_admin_conf.stat.exists

- name: Store master join command
  set_fact:
    master_join_cmd: "{{ master_join_command.stdout }}"
  when: not k8s_admin_conf.stat.exists

- name: Store worker join command
  set_fact:
    worker_join_cmd: "{{ worker_join_command.stdout }}"
  when: not k8s_admin_conf.stat.exists

- name: Install Calico CNI
  become_user: "{{ ansible_user }}"
  shell: |
    kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.26.1/manifests/tigera-operator.yaml
    kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.26.1/manifests/custom-resources.yaml
  environment:
    KUBECONFIG: "/home/{{ ansible_user }}/.kube/config"
  when: not k8s_admin_conf.stat.exists

- name: Wait for Calico pods to be ready
  become_user: "{{ ansible_user }}"
  shell: kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=calico-node -n calico-system --timeout=300s
  environment:
    KUBECONFIG: "/home/{{ ansible_user }}/.kube/config"
  when: not k8s_admin_conf.stat.exists

- name: Install MetalLB for LoadBalancer services
  become_user: "{{ ansible_user }}"
  shell: |
    kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.13.12/config/manifests/metallb-native.yaml
  environment:
    KUBECONFIG: "/home/{{ ansible_user }}/.kube/config"
  when: not k8s_admin_conf.stat.exists

- name: Wait for MetalLB pods to be ready
  become_user: "{{ ansible_user }}"
  shell: kubectl wait --for=condition=ready pod -l app=metallb -n metallb-system --timeout=300s
  environment:
    KUBECONFIG: "/home/{{ ansible_user }}/.kube/config"
  when: not k8s_admin_conf.stat.exists

- name: Configure MetalLB IP address pool
  become_user: "{{ ansible_user }}"
  shell: |
    cat <<EOF | kubectl apply -f -
    apiVersion: metallb.io/v1beta1
    kind: IPAddressPool
    metadata:
      name: neuronews-pool
      namespace: metallb-system
    spec:
      addresses:
      - 10.0.1.100-10.0.1.110
    ---
    apiVersion: metallb.io/v1beta1
    kind: L2Advertisement
    metadata:
      name: neuronews-l2
      namespace: metallb-system
    spec:
      ipAddressPools:
      - neuronews-pool
    EOF
  environment:
    KUBECONFIG: "/home/{{ ansible_user }}/.kube/config"
  when: not k8s_admin_conf.stat.exists

- name: Install NGINX Ingress Controller
  become_user: "{{ ansible_user }}"
  shell: |
    kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.8.2/deploy/static/provider/cloud/deploy.yaml
  environment:
    KUBECONFIG: "/home/{{ ansible_user }}/.kube/config"
  when: not k8s_admin_conf.stat.exists

- name: Wait for NGINX Ingress Controller to be ready
  become_user: "{{ ansible_user }}"
  shell: kubectl wait --namespace ingress-nginx --for=condition=ready pod --selector=app.kubernetes.io/component=controller --timeout=300s
  environment:
    KUBECONFIG: "/home/{{ ansible_user }}/.kube/config"
  when: not k8s_admin_conf.stat.exists

- name: Install cert-manager for SSL certificates
  become_user: "{{ ansible_user }}"
  shell: |
    kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.13.2/cert-manager.yaml
  environment:
    KUBECONFIG: "/home/{{ ansible_user }}/.kube/config"
  when: not k8s_admin_conf.stat.exists

- name: Wait for cert-manager to be ready
  become_user: "{{ ansible_user }}"
  shell: kubectl wait --namespace cert-manager --for=condition=ready pod --selector=app.kubernetes.io/instance=cert-manager --timeout=300s
  environment:
    KUBECONFIG: "/home/{{ ansible_user }}/.kube/config"
  when: not k8s_admin_conf.stat.exists

- name: Get cluster status
  become_user: "{{ ansible_user }}"
  shell: kubectl get nodes -o wide
  environment:
    KUBECONFIG: "/home/{{ ansible_user }}/.kube/config"
  register: cluster_status

- name: Display cluster initialization status
  debug:
    msg: |
      Kubernetes Cluster Initialization Complete!
      ==========================================
      Cluster Name: {{ kubernetes_cluster_name }}
      API Server: {{ ansible_default_ipv4.address }}:{{ kubernetes_api_server_port }}
      
      Network Configuration:
      - Pod Network CIDR: {{ kubernetes_pod_network_cidr }}
      - Service CIDR: {{ kubernetes_service_cidr }}
      - CNI: Calico v3.26.1
      
      Installed Components:
      - MetalLB LoadBalancer
      - NGINX Ingress Controller
      - cert-manager for SSL
      
      Cluster Status:
      {{ cluster_status.stdout }}
      
      Join Commands:
      Master: {{ master_join_cmd | default('Already initialized') }}
      Worker: {{ worker_join_cmd | default('Already initialized') }}
      
      kubectl configuration copied to:
      - /root/.kube/config
      - /home/{{ ansible_user }}/.kube/config
