apiVersion: v1
kind: ConfigMap
metadata:
  name: neuronews-dashboard-config
  namespace: neuronews-staging
data:
  API_BASE_URL: "http://neuronews-api:80"
  ENVIRONMENT: "staging"
  LOG_LEVEL: "DEBUG"
  REFRESH_INTERVAL: "30000"  # 30 seconds for staging
  MAX_ARTICLES_DISPLAY: "100"
  THEME: "light"
  ENABLE_ANALYTICS: "false"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: neuronews-dashboard
  namespace: neuronews-staging
  labels:
    app: neuronews-dashboard
    environment: staging
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  selector:
    matchLabels:
      app: neuronews-dashboard
  template:
    metadata:
      labels:
        app: neuronews-dashboard
        environment: staging
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: dashboard
        image: neuronews/dashboard:staging
        imagePullPolicy: Always
        ports:
        - containerPort: 3000
          name: http
        - containerPort: 8080
          name: metrics
        env:
        - name: PORT
          value: "3000"
        - name: METRICS_PORT
          value: "8080"
        - name: NODE_ENV
          value: "staging"
        envFrom:
        - configMapRef:
            name: neuronews-dashboard-config
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health/ready
            port: http
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: cache
          mountPath: /app/.next/cache
      volumes:
      - name: tmp
        emptyDir: {}
      - name: cache
        emptyDir: {}
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: neuronews-dashboard
  namespace: neuronews-staging
  labels:
    app: neuronews-dashboard
    environment: staging
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: http
    protocol: TCP
    name: http
  - port: 8080
    targetPort: metrics
    protocol: TCP
    name: metrics
  selector:
    app: neuronews-dashboard
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: neuronews-dashboard-ingress
  namespace: neuronews-staging
  labels:
    app: neuronews-dashboard
    environment: staging
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "false"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
spec:
  ingressClassName: nginx
  rules:
  - host: staging.neuronews.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: neuronews-dashboard
            port:
              number: 80
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: neuronews-api-ingress
  namespace: neuronews-staging
  labels:
    app: neuronews-api
    environment: staging
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "false"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, PATCH, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization"
    nginx.ingress.kubernetes.io/enable-cors: "true"
spec:
  ingressClassName: nginx
  rules:
  - host: staging-api.neuronews.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: neuronews-api
            port:
              number: 80
