---
# Prometheus ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: monitoring
  labels:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: monitoring
data:
  prometheus.yml: |
    global:
      scrape_interval: 30s
      scrape_timeout: 10s
      evaluation_interval: 30s
      external_labels:
        cluster: 'neuronews'
        environment: 'production'

    rule_files:
      - "/etc/prometheus/rules/*.yml"

    alerting:
      alertmanagers:
        - static_configs:
            - targets:
              - alertmanager:9093

    scrape_configs:
      # Kubernetes API Server
      - job_name: 'kubernetes-apiservers'
        kubernetes_sd_configs:
        - role: endpoints
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
        - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
          action: keep
          regex: default;kubernetes;https

      # Kubernetes Nodes
      - job_name: 'kubernetes-nodes'
        kubernetes_sd_configs:
        - role: node
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
        - action: labelmap
          regex: __meta_kubernetes_node_label_(.+)
        - target_label: __address__
          replacement: kubernetes.default.svc:443
        - source_labels: [__meta_kubernetes_node_name]
          regex: (.+)
          target_label: __metrics_path__
          replacement: /api/v1/nodes/${1}/proxy/metrics

      # Kubernetes Pods
      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
        - role: pod
        relabel_configs:
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
          action: keep
          regex: true
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
          action: replace
          target_label: __metrics_path__
          regex: (.+)
        - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
          action: replace
          regex: ([^:]+)(?::\d+)?;(\d+)
          replacement: $1:$2
          target_label: __address__
        - action: labelmap
          regex: __meta_kubernetes_pod_label_(.+)
        - source_labels: [__meta_kubernetes_namespace]
          action: replace
          target_label: kubernetes_namespace
        - source_labels: [__meta_kubernetes_pod_name]
          action: replace
          target_label: kubernetes_pod_name

      # NeuroNews FastAPI Service
      - job_name: 'neuronews-fastapi'
        static_configs:
        - targets: ['fastapi-service.neuronews.svc.cluster.local:8000']
        metrics_path: '/metrics'
        scrape_interval: 15s

      # NeuroNews Dashboard
      - job_name: 'neuronews-dashboard'
        static_configs:
        - targets: ['dashboard-service.neuronews.svc.cluster.local:8502']
        metrics_path: '/metrics'
        scrape_interval: 15s

      # NeuroNews Scrapers
      - job_name: 'neuronews-scrapers'
        kubernetes_sd_configs:
        - role: pod
          namespaces:
            names:
            - neuronews
        relabel_configs:
        - source_labels: [__meta_kubernetes_pod_label_app]
          action: keep
          regex: neuronews-scraper
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
          action: keep
          regex: true
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_port]
          action: replace
          target_label: __address__
          regex: (.+)
          replacement: ${1}:8080

      # Node Exporter
      - job_name: 'node-exporter'
        kubernetes_sd_configs:
        - role: pod
        relabel_configs:
        - source_labels: [__meta_kubernetes_pod_label_app]
          action: keep
          regex: node-exporter
        - source_labels: [__address__]
          regex: '(.*):.*'
          target_label: __address__
          replacement: '${1}:9100'

      # kube-state-metrics
      - job_name: 'kube-state-metrics'
        static_configs:
        - targets: ['kube-state-metrics:8080']

  # Alert Rules
  neuronews-alerts.yml: |
    groups:
    - name: neuronews.rules
      rules:
      # High-level application alerts
      - alert: NeuroNewsAPIDown
        expr: up{job="neuronews-fastapi"} == 0
        for: 2m
        labels:
          severity: critical
          service: fastapi
        annotations:
          summary: "NeuroNews API is down"
          description: "The NeuroNews FastAPI service has been down for more than 2 minutes."

      - alert: NeuroNewsDashboardDown
        expr: up{job="neuronews-dashboard"} == 0
        for: 2m
        labels:
          severity: critical
          service: dashboard
        annotations:
          summary: "NeuroNews Dashboard is down"
          description: "The NeuroNews Dashboard service has been down for more than 2 minutes."

      - alert: NeuroNewsHighErrorRate
        expr: rate(http_requests_total{job=~"neuronews-.*",status=~"5.."}[5m]) > 0.1
        for: 5m
        labels:
          severity: warning
          service: "{{ $labels.job }}"
        annotations:
          summary: "High error rate detected"
          description: "{{ $labels.job }} has a high error rate of {{ $value }} errors/sec."

      - alert: NeuroNewsHighLatency
        expr: histogram_quantile(0.95, rate(http_request_duration_seconds_bucket{job=~"neuronews-.*"}[5m])) > 2
        for: 5m
        labels:
          severity: warning
          service: "{{ $labels.job }}"
        annotations:
          summary: "High latency detected"
          description: "{{ $labels.job }} 95th percentile latency is {{ $value }}s."

      # Scraper-specific alerts
      - alert: ScraperJobFailed
        expr: increase(scraper_job_failures_total[10m]) > 0
        for: 0m
        labels:
          severity: warning
          service: scraper
        annotations:
          summary: "Scraper job failed"
          description: "Scraper {{ $labels.scraper_name }} has failed {{ $value }} times in the last 10 minutes."

      - alert: ScraperHighMemoryUsage
        expr: container_memory_usage_bytes{pod=~".*scraper.*"} / container_spec_memory_limit_bytes > 0.8
        for: 10m
        labels:
          severity: warning
          service: scraper
        annotations:
          summary: "Scraper high memory usage"
          description: "Scraper {{ $labels.pod }} is using {{ $value | humanizePercentage }} of its memory limit."

      # NLP processing alerts
      - alert: NLPProcessingBacklog
        expr: nlp_queue_size > 1000
        for: 5m
        labels:
          severity: warning
          service: nlp
        annotations:
          summary: "NLP processing backlog"
          description: "NLP processing queue has {{ $value }} items waiting."

      - alert: NLPProcessingFailed
        expr: increase(nlp_processing_failures_total[10m]) > 5
        for: 0m
        labels:
          severity: warning
          service: nlp
        annotations:
          summary: "NLP processing failures"
          description: "{{ $value }} NLP processing jobs have failed in the last 10 minutes."

      # Infrastructure alerts
      - alert: KubernetesNodeDown
        expr: up{job="kubernetes-nodes"} == 0
        for: 5m
        labels:
          severity: critical
          service: infrastructure
        annotations:
          summary: "Kubernetes node is down"
          description: "Node {{ $labels.instance }} has been down for more than 5 minutes."

      - alert: KubernetesPodCrashLooping
        expr: increase(kube_pod_container_status_restarts_total[1h]) > 5
        for: 0m
        labels:
          severity: warning
          service: infrastructure
        annotations:
          summary: "Pod is crash looping"
          description: "Pod {{ $labels.namespace }}/{{ $labels.pod }} is crash looping."

      - alert: KubernetesDeploymentReplicasMismatch
        expr: kube_deployment_spec_replicas != kube_deployment_status_available_replicas
        for: 10m
        labels:
          severity: warning
          service: infrastructure
        annotations:
          summary: "Deployment replicas mismatch"
          description: "Deployment {{ $labels.namespace }}/{{ $labels.deployment }} has {{ $labels.spec_replicas }} desired but {{ $labels.available_replicas }} available replicas."

      # Resource usage alerts
      - alert: HighCPUUsage
        expr: 100 - (avg by(instance) (irate(node_cpu_seconds_total{mode="idle"}[5m])) * 100) > 85
        for: 10m
        labels:
          severity: warning
          service: infrastructure
        annotations:
          summary: "High CPU usage"
          description: "Node {{ $labels.instance }} has high CPU usage of {{ $value }}%."

      - alert: HighMemoryUsage
        expr: (1 - (node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes)) * 100 > 85
        for: 10m
        labels:
          severity: warning
          service: infrastructure
        annotations:
          summary: "High memory usage"
          description: "Node {{ $labels.instance }} has high memory usage of {{ $value }}%."

      - alert: DiskSpaceLow
        expr: (1 - (node_filesystem_avail_bytes / node_filesystem_size_bytes)) * 100 > 85
        for: 10m
        labels:
          severity: warning
          service: infrastructure
        annotations:
          summary: "Low disk space"
          description: "Node {{ $labels.instance }} has low disk space of {{ $value }}% on {{ $labels.mountpoint }}."
---
# Prometheus PersistentVolumeClaim
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: prometheus-storage
  namespace: monitoring
  labels:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: monitoring
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 50Gi
  storageClassName: standard # Adjust based on your cluster
---
# Prometheus Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: monitoring
  labels:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: monitoring
    app.kubernetes.io/part-of: neuronews
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: prometheus
  template:
    metadata:
      labels:
        app.kubernetes.io/name: prometheus
        app.kubernetes.io/component: monitoring
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: prometheus
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        fsGroup: 65534
      containers:
      - name: prometheus
        image: prom/prometheus:v2.47.0
        args:
          - '--config.file=/etc/prometheus/prometheus.yml'
          - '--storage.tsdb.path=/prometheus/'
          - '--web.console.libraries=/etc/prometheus/console_libraries'
          - '--web.console.templates=/etc/prometheus/consoles'
          - '--storage.tsdb.retention.time=30d'
          - '--storage.tsdb.retention.size=45GB'
          - '--web.enable-lifecycle'
          - '--web.enable-admin-api'
          - '--log.level=info'
        ports:
        - containerPort: 9090
          name: web
          protocol: TCP
        resources:
          requests:
            cpu: 500m
            memory: 1Gi
          limits:
            cpu: 2000m
            memory: 4Gi
        volumeMounts:
        - name: prometheus-config
          mountPath: /etc/prometheus/
        - name: prometheus-storage
          mountPath: /prometheus/
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 30
          periodSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9090
          initialDelaySeconds: 5
          timeoutSeconds: 5
          periodSeconds: 5
          successThreshold: 1
          failureThreshold: 3
      volumes:
      - name: prometheus-config
        configMap:
          name: prometheus-config
      - name: prometheus-storage
        persistentVolumeClaim:
          claimName: prometheus-storage
---
# Prometheus Service
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: monitoring
  labels:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: monitoring
spec:
  type: ClusterIP
  ports:
  - port: 9090
    targetPort: 9090
    protocol: TCP
    name: web
  selector:
    app.kubernetes.io/name: prometheus
