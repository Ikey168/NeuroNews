apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: dashboard-ingress
  namespace: neuronews
  labels:
    app: neuronews-dashboard
    component: ingress
  annotations:
    description: "Ingress for NeuroNews Dashboard with SSL and load balancing"
    # Nginx ingress annotations
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    
    # Rate limiting and security
    nginx.ingress.kubernetes.io/rate-limit: "50"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    nginx.ingress.kubernetes.io/rate-limit-connections: "5"
    
    # Timeouts and buffering
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "30"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/proxy-buffering: "on"
    nginx.ingress.kubernetes.io/proxy-buffer-size: "8k"
    
    # WebSocket support for Streamlit
    nginx.ingress.kubernetes.io/proxy-set-headers: |
      X-Forwarded-Proto $scheme
      X-Forwarded-For $proxy_add_x_forwarded_for
      X-Forwarded-Host $host
      X-Real-IP $remote_addr
    nginx.ingress.kubernetes.io/upstream-hash-by: "$remote_addr"
    
    # CORS settings
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization"
    nginx.ingress.kubernetes.io/cors-allow-credentials: "true"
    
    # Security headers
    nginx.ingress.kubernetes.io/custom-http-errors: "404,503"
    nginx.ingress.kubernetes.io/configuration-snippet: |
      more_set_headers "X-Frame-Options: SAMEORIGIN";
      more_set_headers "X-Content-Type-Options: nosniff";
      more_set_headers "X-XSS-Protection: 1; mode=block";
      more_set_headers "Referrer-Policy: strict-origin-when-cross-origin";
      more_set_headers "Content-Security-Policy: default-src 'self' 'unsafe-inline' 'unsafe-eval' data: blob:; img-src 'self' data: https:; font-src 'self' data: https:";
    
    # Session affinity for Streamlit
    nginx.ingress.kubernetes.io/affinity: "cookie"
    nginx.ingress.kubernetes.io/affinity-mode: "persistent"
    nginx.ingress.kubernetes.io/session-cookie-name: "neuronews-dashboard"
    nginx.ingress.kubernetes.io/session-cookie-max-age: "3600"
    
    # Certificate management (if using cert-manager)
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    cert-manager.io/acme-challenge-type: "http01"
spec:
  tls:
  - hosts:
    - dashboard.neuronews.com
    - neuronews-dashboard.local
    secretName: dashboard-tls-secret
  
  rules:
  # Primary domain
  - host: dashboard.neuronews.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: dashboard-service
            port:
              number: 80
  
  # Local development domain
  - host: neuronews-dashboard.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: dashboard-service
            port:
              number: 80
  
  # Health check path
  - host: dashboard.neuronews.com
    http:
      paths:
      - path: /_stcore/health
        pathType: Exact
        backend:
          service:
            name: dashboard-service
            port:
              number: 80

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: dashboard-hpa
  namespace: neuronews
  labels:
    app: neuronews-dashboard
    component: autoscaling
  annotations:
    description: "HPA for NeuroNews Dashboard with custom metrics"
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: neuronews-dashboard
  
  minReplicas: 3
  maxReplicas: 15
  
  # Scaling behavior configuration
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 15
      - type: Pods
        value: 2
        periodSeconds: 15
      selectPolicy: Max
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
      - type: Pods
        value: 1
        periodSeconds: 60
      selectPolicy: Min
  
  metrics:
  # CPU-based scaling
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  
  # Memory-based scaling
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  
  # Custom metrics for dashboard-specific scaling
  - type: Pods
    pods:
      metric:
        name: dashboard_concurrent_users
      target:
        type: AverageValue
        averageValue: "100"
  
  - type: Pods
    pods:
      metric:
        name: dashboard_response_time_p95
      target:
        type: AverageValue
        averageValue: "2000m"  # 2 seconds

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: dashboard-pdb
  namespace: neuronews
  labels:
    app: neuronews-dashboard
    component: availability
  annotations:
    description: "Pod disruption budget for NeuroNews Dashboard"
spec:
  selector:
    matchLabels:
      app: neuronews-dashboard
  minAvailable: 2  # Always keep at least 2 pods running

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: dashboard-netpol
  namespace: neuronews
  labels:
    app: neuronews-dashboard
    component: security
  annotations:
    description: "Network policy for NeuroNews Dashboard security"
spec:
  podSelector:
    matchLabels:
      app: neuronews-dashboard
  
  policyTypes:
  - Ingress
  - Egress
  
  ingress:
  # Allow ingress from ingress controller
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 8501
  
  # Allow ingress from monitoring namespace
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 8501
    - protocol: TCP
      port: 9090
  
  # Allow ingress from same namespace (for service discovery)
  - from:
    - namespaceSelector:
        matchLabels:
          name: neuronews
    ports:
    - protocol: TCP
      port: 8501
  
  egress:
  # Allow egress to FastAPI service
  - to:
    - podSelector:
        matchLabels:
          app: fastapi
    ports:
    - protocol: TCP
      port: 8000
  
  # Allow egress to Knowledge Graph API
  - to:
    - podSelector:
        matchLabels:
          app: knowledge-graph-api
    ports:
    - protocol: TCP
      port: 8000
  
  # Allow egress to PostgreSQL
  - to:
    - podSelector:
        matchLabels:
          app: postgres
    ports:
    - protocol: TCP
      port: 5432
  
  # Allow egress to Redis
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
  
  # Allow egress to DNS
  - to: []
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53
  
  # Allow egress to external APIs (HTTP/HTTPS)
  - to: []
    ports:
    - protocol: TCP
      port: 80
    - protocol: TCP
      port: 443
