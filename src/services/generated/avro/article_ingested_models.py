"""
Auto-generated types from Avro schema: article_ingested
Generated at: 2025-08-28 18:26:54

DO NOT EDIT THIS FILE MANUALLY!
This file is auto-generated from contract schemas.
To make changes, update the schema file and regenerate.
"""

from __future__ import annotations

import json
from datetime import datetime
from typing import Any, Dict, List, Optional, Union
from pydantic import BaseModel, Field, validator
from dataclasses import dataclass


from datetime import datetime
from datetime import time
from typing import Literal

class Articleingested(BaseModel):
    """Event published when a news article is successfully ingested into the system"""
    
    article_id: str = Field(..., description="Globally unique article identifier (UUID v4 format)")
    title: str = Field(..., description="Article headline for display purposes")
    summary: Optional[str] = Field(None, description="Brief article summary (max 500 characters)")
    source_url: str = Field(..., description="Original URL where article was published")
    source_id: str = Field(..., description="Identifier of the news source/publisher")
    language: Literal['EN', 'ES', 'FR', 'DE', 'IT', 'PT', 'RU', 'ZH', 'JA', 'AR', 'UNKNOWN'] = Field("UNKNOWN", description="Article language (ISO 639-1 codes)")
    category: Literal['TECHNOLOGY', 'POLITICS', 'BUSINESS', 'SPORTS', 'ENTERTAINMENT', 'SCIENCE', 'HEALTH', 'ENVIRONMENT', 'FINANCE', 'OTHER'] = Field("OTHER", description="Article category classification")
    content_length_bytes: int = Field(..., description="Size of article content in bytes")
    published_at: int = Field(..., description="Original publication timestamp from source (milliseconds since epoch)")
    ingested_at: int = Field(..., description="Timestamp when article was ingested by NeuroNews (milliseconds since epoch)")
    is_breaking_news: bool = Field(False, description="Flag indicating if article is classified as breaking news")
    tags: List[str] = Field([], description="Array of topic tags associated with the article")
    metadata: Optional[Dict[str, str]] = Field(None, description="Additional metadata fields as key-value pairs")
    
    class Config:
        """Pydantic model configuration."""
        allow_population_by_field_name = True
        json_encoders = {
            datetime: lambda v: int(v.timestamp() * 1000),  # Convert to milliseconds
        }
        
    @classmethod
    def from_avro_dict(cls, data: Dict[str, Any]) -> 'Articleingested':
        """Create instance from Avro dictionary."""
        return cls(**data)
    
    def to_avro_dict(self) -> Dict[str, Any]:
        """Convert to Avro-compatible dictionary."""
        return self.dict()
