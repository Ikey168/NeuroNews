"""
Auto-generated types from JSON Schema schema: article_request
Generated at: 2025-08-28 18:26:54

DO NOT EDIT THIS FILE MANUALLY!
This file is auto-generated from contract schemas.
To make changes, update the schema file and regenerate.
"""

from __future__ import annotations

import json
from datetime import datetime
from typing import Any, Dict, List, Optional, Union
from pydantic import BaseModel, Field, validator
from dataclasses import dataclass


from datetime import datetime, date, time
from typing import Literal

class ArticleRequest(BaseModel):
    """Schema for creating or updating articles via REST API"""
    
    title: str = Field(min_length=1, max_length=200, description="Article headline for display purposes")
    content: str = Field(min_length=1, max_length=50000, description="Full article content in plain text or markdown")
    summary: Optional[str] = Field(default=None, max_length=500, description="Brief article summary (optional)")
    source_url: str = Field(description="Original URL where article was published")
    source_id: str = Field(description="Identifier of the news source/publisher")
    language: Literal['en', 'es', 'fr', 'de', 'it', 'pt', 'ru', 'zh', 'ja', 'ar', 'unknown'] = Field(default="unknown", description="Article language (ISO 639-1 codes)")
    category: Literal['technology', 'politics', 'business', 'sports', 'entertainment', 'science', 'health', 'environment', 'finance', 'other'] = Field(default="other", description="Article category classification")
    published_at: datetime = Field(description="Original publication timestamp (ISO 8601 format)")
    is_breaking_news: bool = Field(default=False, description="Flag indicating if article is classified as breaking news")
    tags: Optional[List[str]] = Field(default=None, description="Array of topic tags associated with the article")
    metadata: Optional[Dict[str, Any]] = Field(default=None, description="Additional metadata fields as key-value pairs")
    
    class Config:
        """Pydantic model configuration."""
        allow_population_by_field_name = True
        extra = "forbid"  # Prevent additional fields
        
    @classmethod
    def from_json_dict(cls, data: Dict[str, Any]) -> 'ArticleRequest':
        """Create instance from JSON dictionary."""
        return cls(**data)
    
    def to_json_dict(self) -> Dict[str, Any]:
        """Convert to JSON-compatible dictionary."""
        return self.dict(exclude_none=True)
