"""
Auto-generated types from Avro schema: query_executed
Generated at: 2025-08-28 18:26:54

DO NOT EDIT THIS FILE MANUALLY!
This file is auto-generated from contract schemas.
To make changes, update the schema file and regenerate.
"""

from __future__ import annotations

import json
from datetime import datetime
from typing import Any, Dict, List, Optional, Union
from pydantic import BaseModel, Field, validator
from dataclasses import dataclass


from datetime import date
from datetime import datetime
from datetime import time
from typing import Literal

class Searchqueryexecuted(BaseModel):
    """Event published when a search query is executed by a user"""
    
    query_id: str = Field(..., description="Unique identifier for this search query (UUID v4 format)")
    user_id: Optional[str] = Field(None, description="Tokenized user identifier (null for anonymous users)")
    session_id: str = Field(..., description="User session identifier for tracking search behavior")
    query_text: str = Field(..., description="The actual search query text (sanitized)")
    query_type: Literal['KEYWORD', 'SEMANTIC', 'HYBRID', 'FACETED'] = Field("KEYWORD", description="Type of search query executed")
    filters: Optional[Searchfilters] = Field(None, description="Applied search filters")
    results_count: int = Field(..., description="Number of results returned for this query")
    response_time_ms: int = Field(..., description="Time taken to execute the search in milliseconds")
    executed_at: int = Field(..., description="Timestamp when the search was executed")
    client_info: Optional[Clientinfo] = Field(None, description="Client information for analytics")
    
    class Config:
        """Pydantic model configuration."""
        allow_population_by_field_name = True
        json_encoders = {
            datetime: lambda v: int(v.timestamp() * 1000),  # Convert to milliseconds
        }
        
    @classmethod
    def from_avro_dict(cls, data: Dict[str, Any]) -> 'Searchqueryexecuted':
        """Create instance from Avro dictionary."""
        return cls(**data)
    
    def to_avro_dict(self) -> Dict[str, Any]:
        """Convert to Avro-compatible dictionary."""
        return self.dict()
