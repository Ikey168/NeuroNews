"""
Auto-generated types from Avro schema: article_ingest_v1
Generated at: 2025-08-28 18:26:54

DO NOT EDIT THIS FILE MANUALLY!
This file is auto-generated from contract schemas.
To make changes, update the schema file and regenerate.
"""

from __future__ import annotations

import json
from datetime import datetime
from typing import Any, Dict, List, Optional, Union
from pydantic import BaseModel, Field, validator
from dataclasses import dataclass


from datetime import datetime
from datetime import time

class Articleingest(BaseModel):
    """Raw article as captured by crawlers"""
    
    article_id: str = Field(..., description="Unique identifier for the article")
    source_id: str = Field(..., description="Identifier of the news source/publisher")
    url: str = Field(..., description="Original URL where the article was published")
    title: Optional[str] = Field(None, description="Article headline/title")
    body: Optional[str] = Field(None, description="Full article content/body text")
    language: str = Field(..., description="Article language using ISO 639-1 code (e.g., 'en', 'es', 'fr')")
    country: Optional[str] = Field(None, description="Country of publication using ISO 3166-1 alpha-2 code (e.g., 'US', 'UK', 'FR')")
    published_at: datetime = Field(..., description="Timestamp when the article was originally published (milliseconds since epoch)")
    ingested_at: datetime = Field(..., description="Timestamp when the article was ingested by our system (milliseconds since epoch)")
    sentiment_score: Optional[float] = Field(None, description="Sentiment score ranging from -1 (negative) to 1 (positive), null if not analyzed")
    topics: List[str] = Field([], description="Array of topic tags or categories associated with the article")
    
    class Config:
        """Pydantic model configuration."""
        allow_population_by_field_name = True
        json_encoders = {
            datetime: lambda v: int(v.timestamp() * 1000),  # Convert to milliseconds
        }
        
    @classmethod
    def from_avro_dict(cls, data: Dict[str, Any]) -> 'Articleingest':
        """Create instance from Avro dictionary."""
        return cls(**data)
    
    def to_avro_dict(self) -> Dict[str, Any]:
        """Convert to Avro-compatible dictionary."""
        return self.dict()
