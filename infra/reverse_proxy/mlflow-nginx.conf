# MLflow Reverse Proxy Configuration (Issue #226)
# 
# This nginx configuration provides basic authentication protection
# for MLflow in development environments.
#
# IMPORTANT: This is for DEVELOPMENT ONLY
# Production deployments should use enterprise authentication
# methods like OAuth, SAML, or cloud provider IAM.

# Upstream MLflow server
upstream mlflow_backend {
    server 127.0.0.1:5000;
    keepalive 32;
}

# Main server block for MLflow proxy
server {
    listen 8080;
    server_name localhost;
    
    # Basic security headers
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";
    add_header Referrer-Policy strict-origin-when-cross-origin;
    
    # Logging configuration
    access_log /var/log/nginx/mlflow-access.log;
    error_log /var/log/nginx/mlflow-error.log warn;
    
    # Basic authentication
    auth_basic "MLflow Access";
    auth_basic_user_file /etc/nginx/auth/mlflow.htpasswd;
    
    # Main MLflow location
    location /mlflow/ {
        # Remove /mlflow prefix before forwarding
        rewrite ^/mlflow/(.*)$ /$1 break;
        
        # Proxy configuration
        proxy_pass http://mlflow_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # WebSocket support (for MLflow UI live updates)
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        
        # Timeout settings
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        
        # Buffer settings for better performance
        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;
        proxy_busy_buffers_size 8k;
        
        # Handle large model artifacts
        client_max_body_size 500M;
        proxy_request_buffering off;
    }
    
    # Redirect root to MLflow
    location = / {
        return 301 /mlflow/;
    }
    
    # Health check endpoint (no auth required)
    location /health {
        access_log off;
        return 200 "MLflow Proxy OK\n";
        add_header Content-Type text/plain;
    }
    
    # Static assets (if any)
    location /static/ {
        proxy_pass http://mlflow_backend;
        proxy_set_header Host $host;
        
        # Cache static assets
        expires 1h;
        add_header Cache-Control "public, immutable";
    }
    
    # Handle favicon requests
    location /favicon.ico {
        proxy_pass http://mlflow_backend;
        expires 1d;
    }
    
    # Deny access to sensitive files
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # Rate limiting (adjust as needed)
    location /api/ {
        # Allow higher rate for API calls
        limit_req zone=api_limit burst=20 nodelay;
        
        proxy_pass http://mlflow_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}

# Rate limiting zones (add to nginx.conf http block)
# http {
#     limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;
#     limit_req_zone $binary_remote_addr zone=ui_limit:10m rate=2r/s;
# }

# SSL/HTTPS Configuration (for production-like testing)
# Uncomment and modify as needed
#
# server {
#     listen 8443 ssl http2;
#     server_name localhost;
#     
#     # SSL certificate configuration
#     ssl_certificate /path/to/certificate.crt;
#     ssl_certificate_key /path/to/private.key;
#     
#     # SSL security settings
#     ssl_protocols TLSv1.2 TLSv1.3;
#     ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
#     ssl_prefer_server_ciphers off;
#     ssl_session_cache shared:SSL:10m;
#     ssl_session_timeout 10m;
#     
#     # HSTS (HTTP Strict Transport Security)
#     add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
#     
#     # Same location blocks as above
#     auth_basic "MLflow Access (HTTPS)";
#     auth_basic_user_file /etc/nginx/auth/mlflow.htpasswd;
#     
#     location /mlflow/ {
#         rewrite ^/mlflow/(.*)$ /$1 break;
#         proxy_pass http://mlflow_backend;
#         proxy_set_header Host $host;
#         proxy_set_header X-Real-IP $remote_addr;
#         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#         proxy_set_header X-Forwarded-Proto https;
#         
#         client_max_body_size 500M;
#     }
# }

# Configuration Notes:
# 
# 1. MLflow Server Setup:
#    Start MLflow on localhost only to prevent direct access:
#    mlflow server --host 127.0.0.1 --port 5000 --backend-store-uri sqlite:///mlflow.db
#
# 2. Authentication Setup:
#    Create password file:
#    sudo mkdir -p /etc/nginx/auth
#    sudo htpasswd -c /etc/nginx/auth/mlflow.htpasswd username
#
# 3. Nginx Setup:
#    sudo cp mlflow-nginx.conf /etc/nginx/sites-available/mlflow
#    sudo ln -s /etc/nginx/sites-available/mlflow /etc/nginx/sites-enabled/
#    sudo nginx -t && sudo systemctl restart nginx
#
# 4. Access:
#    HTTP: http://localhost:8080/mlflow/
#    HTTPS: https://localhost:8443/mlflow/ (if SSL configured)
#
# 5. Production Considerations:
#    - Replace basic auth with OAuth/SAML
#    - Use proper SSL certificates
#    - Implement proper logging and monitoring
#    - Add WAF protection
#    - Configure proper firewall rules
