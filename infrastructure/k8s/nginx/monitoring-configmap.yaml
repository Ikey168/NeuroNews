apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-monitoring-config
  namespace: neuronews
  labels:
    app: nginx-monitoring
    component: configuration
data:
  nginx.conf: |
    user  nginx;
    worker_processes  auto;
    
    # Enhanced error logging with detailed information
    error_log  /var/log/nginx/error.log  info;
    pid        /var/run/nginx.pid;
    
    # Load dynamic modules for monitoring
    load_module modules/ngx_http_stub_status_module.so;
    
    events {
      worker_connections  2048;
      use epoll;
      multi_accept on;
    }
    
    http {
      include       /etc/nginx/mime.types;
      default_type  application/octet-stream;
      
      # Enhanced log format with performance metrics
      log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                     '$status $body_bytes_sent "$http_referer" '
                     '"$http_user_agent" "$http_x_forwarded_for" '
                     'rt=$request_time uct="$upstream_connect_time" '
                     'uht="$upstream_header_time" urt="$upstream_response_time" '
                     'cs=$upstream_cache_status';
      
      # JSON log format for structured logging
      log_format json_analytics escape=json
        '{'
          '"time_local":"$time_local",'
          '"remote_addr":"$remote_addr",'
          '"remote_user":"$remote_user",'
          '"request":"$request",'
          '"status": $status,'
          '"body_bytes_sent":$body_bytes_sent,'
          '"request_time":$request_time,'
          '"http_referrer":"$http_referer",'
          '"http_user_agent":"$http_user_agent",'
          '"http_x_forwarded_for":"$http_x_forwarded_for",'
          '"http_host":"$http_host",'
          '"server_name":"$server_name",'
          '"upstream_addr":"$upstream_addr",'
          '"upstream_connect_time":"$upstream_connect_time",'
          '"upstream_header_time":"$upstream_header_time",'
          '"upstream_response_time":"$upstream_response_time",'
          '"upstream_cache_status":"$upstream_cache_status"'
        '}';
      
      # Performance log format
      log_format performance '$time_local|$remote_addr|$request|$status|'
                            '$request_time|$upstream_response_time|'
                            '$body_bytes_sent|$http_user_agent';
      
      # Access logs with multiple formats
      access_log  /var/log/nginx/access.log  main;
      access_log  /var/log/nginx/access_json.log  json_analytics;
      access_log  /var/log/nginx/performance.log  performance;
      
      # Performance optimizations
      sendfile        on;
      tcp_nopush      on;
      tcp_nodelay     on;
      keepalive_timeout  65;
      types_hash_max_size 2048;
      
      # Gzip compression
      gzip on;
      gzip_vary on;
      gzip_min_length 1024;
      gzip_comp_level 6;
      gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;
      
      # Rate limiting for monitoring
      limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
      limit_req_zone $binary_remote_addr zone=health:10m rate=50r/s;
      
      # Upstream configuration with health checks
      upstream fastapi_backend {
        least_conn;
        server neuronews-fastapi-service.neuronews.svc.cluster.local:80 max_fails=3 fail_timeout=30s;
        keepalive 32;
      }
      
      # Metrics server for Prometheus
      server {
        listen 9113;
        server_name _;
        
        location /nginx_status {
          stub_status on;
          access_log off;
          allow 127.0.0.1;
          allow 10.0.0.0/8;
          allow 172.16.0.0/12;
          allow 192.168.0.0/16;
          deny all;
        }
        
        location /metrics {
          stub_status on;
          access_log off;
          allow 127.0.0.1;
          allow 10.0.0.0/8;
          allow 172.16.0.0/12;
          allow 192.168.0.0/16;
          deny all;
        }
        
        location /health {
          return 200 "healthy\n";
          access_log off;
        }
      }
      
      # Main API server
      server {
        listen 80 default_server;
        server_name _;
        
        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header Referrer-Policy "no-referrer-when-downgrade" always;
        add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;
        
        # Health check endpoint with rate limiting
        location /health {
          limit_req zone=health burst=20 nodelay;
          proxy_pass http://fastapi_backend/health;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $scheme;
          
          # Quick response for health checks
          proxy_connect_timeout 5s;
          proxy_send_timeout 5s;
          proxy_read_timeout 5s;
          
          access_log /var/log/nginx/health.log main;
        }
        
        # API endpoints with monitoring
        location /api/ {
          limit_req zone=api burst=20 nodelay;
          
          proxy_pass http://fastapi_backend/api/;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $scheme;
          
          # Timeouts for monitoring
          proxy_connect_timeout 30s;
          proxy_send_timeout 30s;
          proxy_read_timeout 60s;
          
          # Buffer optimization
          proxy_buffering on;
          proxy_buffer_size 128k;
          proxy_buffers 4 256k;
          proxy_busy_buffers_size 256k;
          
          access_log /var/log/nginx/api.log main;
        }
        
        # Documentation endpoint
        location /docs {
          proxy_pass http://fastapi_backend/docs;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $scheme;
          
          access_log /var/log/nginx/docs.log main;
        }
        
        # Root endpoint
        location / {
          limit_req zone=api burst=30 nodelay;
          
          proxy_pass http://fastapi_backend/;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $scheme;
          
          # Connection pooling
          proxy_http_version 1.1;
          proxy_set_header Connection "";
          
          access_log /var/log/nginx/root.log main;
        }
        
        # Error pages
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        
        location = /50x.html {
          root /usr/share/nginx/html;
        }
      }
    }
  
  # Prometheus metrics configuration
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
    
    rule_files:
      - "nginx_rules.yml"
    
    scrape_configs:
      - job_name: 'nginx'
        static_configs:
          - targets: ['nginx-monitoring-service:9113']
        metrics_path: /nginx_status
        scrape_interval: 5s
        
      - job_name: 'nginx-exporter'
        static_configs:
          - targets: ['nginx-exporter-service:9113']
        scrape_interval: 10s
  
  # NGINX monitoring rules
  nginx_rules.yml: |
    groups:
    - name: nginx
      rules:
      - alert: NginxDown
        expr: up{job="nginx"} == 0
        for: 1m
        labels:
          severity: critical
        annotations:
          summary: "NGINX is down"
          description: "NGINX has been down for more than 1 minute"
      
      - alert: NginxHighRequestRate
        expr: rate(nginx_http_requests_total[5m]) > 100
        for: 2m
        labels:
          severity: warning
        annotations:
          summary: "High NGINX request rate"
          description: "NGINX request rate is {{ $value }} requests/second"
      
      - alert: NginxHighErrorRate
        expr: rate(nginx_http_requests_total{status=~"5.."}[5m]) > 5
        for: 1m
        labels:
          severity: critical
        annotations:
          summary: "High NGINX error rate"
          description: "NGINX 5xx error rate is {{ $value }} errors/second"
      
      - alert: NginxHighResponseTime
        expr: nginx_http_request_duration_seconds{quantile="0.95"} > 2
        for: 2m
        labels:
          severity: warning
        annotations:
          summary: "High NGINX response time"
          description: "NGINX 95th percentile response time is {{ $value }} seconds"
