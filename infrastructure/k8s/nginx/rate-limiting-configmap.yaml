apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-rate-limiting-config
  namespace: neuronews
  labels:
    app: nginx
    component: rate-limiting
    issue: "86"
data:
  nginx.conf: |
    user nginx;
    worker_processes auto;
    error_log /var/log/nginx/error.log warn;
    pid /var/run/nginx.pid;
    
    # Load dynamic modules
    load_module modules/ngx_http_geoip2_module.so;
    
    events {
        worker_connections 4096;
        use epoll;
        multi_accept on;
    }
    
    http {
        include /etc/nginx/mime.types;
        default_type application/octet-stream;
        
        # Basic optimizations
        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
        keepalive_timeout 65;
        types_hash_max_size 2048;
        server_tokens off;
        
        # Gzip compression
        gzip on;
        gzip_vary on;
        gzip_min_length 1024;
        gzip_types text/plain text/css text/xml text/javascript 
                   application/x-javascript application/xml+rss 
                   application/javascript application/json;
        
        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header Referrer-Policy "no-referrer-when-downgrade" always;
        add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;
        
        # GeoIP2 database configuration
        geoip2 /usr/share/GeoIP/GeoLite2-Country.mmdb {
            auto_reload 5m;
            $geoip2_metadata_country_build metadata build_epoch;
            $geoip2_data_country_code country iso_code;
            $geoip2_data_country_name country names en;
        }
        
        # Real IP configuration for load balancers
        set_real_ip_from 10.0.0.0/8;
        set_real_ip_from 172.16.0.0/12;
        set_real_ip_from 192.168.0.0/16;
        set_real_ip_from fc00::/7;
        real_ip_header X-Forwarded-For;
        real_ip_recursive on;
        
        # Rate limiting zones
        # General API rate limiting: 100 requests per minute per IP
        limit_req_zone $binary_remote_addr zone=api_limit:50m rate=100r/m;
        
        # Burst API rate limiting: 10 requests per second per IP
        limit_req_zone $binary_remote_addr zone=api_burst:50m rate=10r/s;
        
        # Authentication endpoints: 5 requests per minute per IP
        limit_req_zone $binary_remote_addr zone=auth_limit:10m rate=5r/m;
        
        # Search endpoints: 20 requests per minute per IP
        limit_req_zone $binary_remote_addr zone=search_limit:10m rate=20r/m;
        
        # Download/upload endpoints: 1 request per second per IP
        limit_req_zone $binary_remote_addr zone=download_limit:10m rate=1r/s;
        
        # User-based rate limiting for authenticated users
        limit_req_zone $http_x_user_id zone=user_api_limit:10m rate=200r/m;
        
        # Bot detection and limiting
        limit_req_zone $binary_remote_addr zone=bot_limit:10m rate=1r/m;
        
        # Connection limiting
        limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;
        limit_conn_zone $server_name zone=conn_limit_per_server:10m;
        
        # Request size limiting
        client_max_body_size 10M;
        client_body_buffer_size 128k;
        client_header_buffer_size 3m;
        large_client_header_buffers 4 256k;
        
        # Timeout configurations
        client_body_timeout 60s;
        client_header_timeout 60s;
        keepalive_timeout 65s;
        send_timeout 60s;
        
        # Log formats
        log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                       '$status $body_bytes_sent "$http_referer" '
                       '"$http_user_agent" "$http_x_forwarded_for"';
        
        log_format security '$remote_addr - $remote_user [$time_local] "$request" '
                           '$status $body_bytes_sent "$http_referer" '
                           '"$http_user_agent" "$http_x_forwarded_for" '
                           'rt=$request_time uct="$upstream_connect_time" '
                           'uht="$upstream_header_time" urt="$upstream_response_time" '
                           'country="$geoip2_data_country_code" '
                           'rate_limited="$limit_req_status"';
        
        log_format ddos_log '$remote_addr - [$time_local] "$request" '
                           '$status "$http_user_agent" '
                           'country="$geoip2_data_country_code" '
                           'rate_limited="$limit_req_status" '
                           'conn_limit="$limit_conn_status"';
        
        access_log /var/log/nginx/access.log main;
        error_log /var/log/nginx/error.log warn;
        
        # DDoS and security log
        access_log /var/log/nginx/security.log security;
        
        # Blacklist configuration
        include /etc/nginx/conf.d/blacklist.conf;
        include /etc/nginx/conf.d/bot-detection.conf;
        
        # Default server for catching undefined hosts
        server {
            listen 80 default_server;
            listen [::]:80 default_server;
            server_name _;
            
            # Drop requests to undefined hosts
            return 444;
        }
        
        # Main application server
        server {
            listen 80;
            server_name neuronews.local *.neuronews.local;
            
            # Connection limits
            limit_conn conn_limit_per_ip 20;
            limit_conn conn_limit_per_server 1000;
            
            # Security checks
            include /etc/nginx/conf.d/security-rules.conf;
            
            # DDoS protection
            include /etc/nginx/conf.d/ddos-protection.conf;
            
            # Bot detection
            include /etc/nginx/conf.d/bot-detection.conf;
            
            # Geo-blocking (block known malicious countries)
            if ($geoip2_data_country_code ~ "CN|RU|KP|IR") {
                return 403 "Access denied from your location";
            }
            
            # Health check endpoint (no rate limiting)
            location = /health {
                access_log off;
                return 200 "healthy\n";
                add_header Content-Type text/plain;
            }
            
            # Nginx status (internal only)
            location = /nginx_status {
                stub_status on;
                access_log off;
                allow 127.0.0.1;
                allow 10.0.0.0/8;
                allow 172.16.0.0/12;
                allow 192.168.0.0/16;
                deny all;
            }
            
            # Authentication endpoints (strict rate limiting)
            location ~ ^/api/v1/(auth|login|register|reset-password) {
                limit_req zone=auth_limit burst=3 nodelay;
                limit_req_status 429;
                
                # Additional security for auth endpoints
                if ($request_method !~ ^(POST)$) {
                    return 405;
                }
                
                proxy_pass http://backend;
                include /etc/nginx/conf.d/proxy-headers.conf;
                
                # Log authentication attempts
                access_log /var/log/nginx/auth.log security;
            }
            
            # Search endpoints (moderate rate limiting)
            location ~ ^/api/v1/(search|query) {
                limit_req zone=search_limit burst=10 nodelay;
                limit_req_status 429;
                
                proxy_pass http://backend;
                include /etc/nginx/conf.d/proxy-headers.conf;
            }
            
            # Download/upload endpoints (strict rate limiting)
            location ~ ^/api/v1/(download|upload|export) {
                limit_req zone=download_limit burst=2 nodelay;
                limit_req_status 429;
                
                # Additional file size limits
                client_max_body_size 50M;
                
                proxy_pass http://backend;
                include /etc/nginx/conf.d/proxy-headers.conf;
                
                # Longer timeouts for file operations
                proxy_read_timeout 300s;
                proxy_send_timeout 300s;
            }
            
            # API endpoints (general rate limiting)
            location ~ ^/api/v1/ {
                # Apply both general and burst limiting
                limit_req zone=api_limit burst=20 nodelay;
                limit_req zone=api_burst burst=5 nodelay;
                limit_req_status 429;
                
                # User-based rate limiting for authenticated users
                limit_req zone=user_api_limit burst=50 nodelay;
                
                proxy_pass http://backend;
                include /etc/nginx/conf.d/proxy-headers.conf;
            }
            
            # Static content (minimal rate limiting)
            location ~ \.(css|js|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
                expires 1y;
                add_header Cache-Control "public, immutable";
                add_header Vary Accept-Encoding;
                
                # Light rate limiting for static content
                limit_req zone=api_burst burst=50 nodelay;
                
                try_files $uri $uri/ =404;
            }
            
            # Default location
            location / {
                limit_req zone=api_limit burst=10 nodelay;
                limit_req_status 429;
                
                proxy_pass http://backend;
                include /etc/nginx/conf.d/proxy-headers.conf;
            }
            
            # Custom error pages
            error_page 429 /429.html;
            error_page 403 /403.html;
            error_page 404 /404.html;
            error_page 500 502 503 504 /50x.html;
            
            location = /429.html {
                root /usr/share/nginx/html;
                internal;
            }
            
            location = /403.html {
                root /usr/share/nginx/html;
                internal;
            }
            
            location = /404.html {
                root /usr/share/nginx/html;
                internal;
            }
            
            location = /50x.html {
                root /usr/share/nginx/html;
                internal;
            }
        }
        
        # Backend upstream configuration
        upstream backend {
            least_conn;
            server app:8000 max_fails=3 fail_timeout=30s;
            server app:8001 max_fails=3 fail_timeout=30s backup;
            
            # Health check
            keepalive 32;
        }
    }

  blacklist.conf: |
    # Known malicious IP ranges and patterns
    # Add specific IPs or ranges that should be blocked
    
    # Block requests from known bot networks
    deny 192.168.100.0/24;  # Example malicious range
    
    # Map for blacklisted IPs (can be updated dynamically)
    map $remote_addr $blocked_ip {
        default 0;
        ~^192\.168\.100\. 1;
        ~^10\.0\.0\.1$ 1;
    }
    
    # Block if IP is in blacklist
    if ($blocked_ip) {
        return 403 "IP blocked";
    }

  bot-detection.conf: |
    # Bot detection and blocking configuration
    
    # Map common bot user agents
    map $http_user_agent $is_bot {
        default 0;
        ~*bot 1;
        ~*crawler 1;
        ~*spider 1;
        ~*scraper 1;
        ~*curl 1;
        ~*wget 1;
        ~*python 1;
        ~*scanner 1;
        ~*mass 1;
        ~*download 1;
        "" 1;  # Empty user agent
    }
    
    # Map suspicious request patterns
    map $request_uri $suspicious_request {
        default 0;
        ~*\.(php|asp|jsp)$ 1;
        ~*wp-admin 1;
        ~*admin 1;
        ~*phpmyadmin 1;
        ~*\.env 1;
        ~*config\. 1;
    }
    
    # Block known bad bots
    if ($is_bot) {
        limit_req zone=bot_limit burst=1 nodelay;
        access_log /var/log/nginx/bot.log ddos_log;
    }
    
    # Block suspicious requests
    if ($suspicious_request) {
        return 403 "Suspicious request blocked";
    }

  security-rules.conf: |
    # Security rules and protections
    
    # Block requests with suspicious headers
    if ($http_user_agent ~* "sqlmap|nikto|nessus|openvas|nmap") {
        return 403 "Security scan detected";
    }
    
    # Block SQL injection attempts
    if ($args ~* "union.*select|insert.*into|delete.*from|drop.*table") {
        return 403 "SQL injection attempt";
    }
    
    # Block XSS attempts
    if ($args ~* "<script|javascript:|vbscript:|onload|onerror") {
        return 403 "XSS attempt blocked";
    }
    
    # Block directory traversal attempts
    if ($uri ~* "\.\./") {
        return 403 "Directory traversal blocked";
    }
    
    # Block requests with no referer from external IPs (possible bot)
    if ($http_referer = "" ) {
        set $no_referer 1;
    }
    if ($remote_addr !~ "^(127\.|10\.|172\.16\.|192\.168\.)") {
        set $no_referer "${no_referer}1";
    }
    if ($no_referer = "11") {
        limit_req zone=bot_limit burst=1 nodelay;
    }

  ddos-protection.conf: |
    # DDoS protection rules
    
    # Detect rapid consecutive requests (possible DDoS)
    map $remote_addr $request_rate {
        default "";
        ~. $binary_remote_addr;
    }
    
    # Block requests with suspicious query strings
    if ($query_string ~* "(GLOBALS|_REQUEST|_SESSION|_COOKIE|_SERVER)") {
        return 403 "Malicious query string";
    }
    
    # Block requests with overly long query strings (DDoS amplification)
    if ($query_string ~ ".{1000,}") {
        return 413 "Query string too long";
    }
    
    # Block POST requests without content-length
    if ($request_method = POST) {
        set $content_length_check $content_length;
    }
    if ($content_length_check = "") {
        return 400 "Content-Length required";
    }
    
    # Rate limit based on request method
    if ($request_method !~ ^(GET|POST|HEAD|OPTIONS)$) {
        return 405 "Method not allowed";
    }

  proxy-headers.conf: |
    # Proxy headers configuration
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-Host $server_name;
    proxy_set_header X-User-Country $geoip2_data_country_code;
    
    # Connection settings
    proxy_connect_timeout 30s;
    proxy_send_timeout 60s;
    proxy_read_timeout 60s;
    proxy_buffering on;
    proxy_buffer_size 8k;
    proxy_buffers 16 8k;
    proxy_busy_buffers_size 16k;
    
    # Hide backend server info
    proxy_hide_header X-Powered-By;
    proxy_hide_header Server;

  error-pages.html: |
    <!DOCTYPE html>
    <html>
    <head>
        <title>NeuroNews - Access Limited</title>
        <style>
            body { font-family: Arial, sans-serif; text-align: center; padding: 50px; }
            .error { color: #e74c3c; }
            .info { color: #3498db; }
        </style>
    </head>
    <body>
        <h1 class="error">Rate Limit Exceeded</h1>
        <p class="info">You have exceeded the allowed number of requests.</p>
        <p>Please wait a moment before trying again.</p>
        <p>If you believe this is an error, please contact support.</p>
    </body>
    </html>
