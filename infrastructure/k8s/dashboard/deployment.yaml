apiVersion: apps/v1
kind: Deployment
metadata:
  name: neuronews-dashboard
  namespace: neuronews
  labels:
    app: neuronews-dashboard
    component: frontend
    tier: presentation
    version: v1.0.0
  annotations:
    description: "NeuroNews Streamlit Dashboard Deployment"
    deployment.kubernetes.io/revision: "1"
spec:
  replicas: 3
  selector:
    matchLabels:
      app: neuronews-dashboard
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 2
  template:
    metadata:
      labels:
        app: neuronews-dashboard
        component: frontend
        tier: presentation
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: dashboard-service-account
      
      # Security Context
      securityContext:
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      
      # Init Container to wait for dependencies
      initContainers:
      - name: wait-for-api
        image: busybox:1.35
        command: ['sh', '-c']
        args:
        - |
          echo "Waiting for FastAPI service..."
          until nc -z fastapi-service.neuronews.svc.cluster.local 8000; do
            echo "FastAPI not ready, waiting..."
            sleep 5
          done
          echo "FastAPI service is ready"
        securityContext:
          runAsUser: 1001
          runAsGroup: 1001
          runAsNonRoot: true
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        resources:
          requests:
            cpu: 50m
            memory: 64Mi
          limits:
            cpu: 100m
            memory: 128Mi
      
      containers:
      - name: dashboard
        image: ikey168/neuronews-dashboard:latest
        imagePullPolicy: Always
        
        ports:
        - name: http
          containerPort: 8501
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        
        # Environment Variables from ConfigMap and Secrets
        envFrom:
        - configMapRef:
            name: dashboard-config
        - secretRef:
            name: dashboard-secrets
        
        # Additional environment variables
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        
        # Resource limits and requests
        resources:
          requests:
            memory: "512Mi"
            cpu: "200m"
          limits:
            memory: "2Gi"
            cpu: "1"
        
        # Health checks
        livenessProbe:
          httpGet:
            path: /_stcore/health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        
        readinessProbe:
          httpGet:
            path: /_stcore/health
            port: http
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
          successThreshold: 1
        
        startupProbe:
          httpGet:
            path: /_stcore/health
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 20
          successThreshold: 1
        
        # Security Context
        securityContext:
          runAsUser: 1001
          runAsGroup: 1001
          runAsNonRoot: true
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        
        # Volume mounts
        volumeMounts:
        - name: streamlit-config
          mountPath: /.streamlit
          readOnly: true
        - name: tmp
          mountPath: /tmp
        - name: app-cache
          mountPath: /app/.streamlit
        - name: user-cache
          mountPath: /home/neuronews/.cache
      
      # Volumes
      volumes:
      - name: streamlit-config
        configMap:
          name: dashboard-streamlit-config
      - name: tmp
        emptyDir: {}
      - name: app-cache
        emptyDir: {}
      - name: user-cache
        emptyDir: {}
      
      # Pod scheduling preferences
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchLabels:
                  app: neuronews-dashboard
              topologyKey: kubernetes.io/hostname
      
      # Tolerations for node selection
      tolerations:
      - key: "frontend-node"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
      
      # Restart policy
      restartPolicy: Always
      
      # DNS configuration
      dnsPolicy: ClusterFirst
      dnsConfig:
        options:
        - name: ndots
          value: "2"
        - name: edns0

---
apiVersion: v1
kind: Service
metadata:
  name: dashboard-service
  namespace: neuronews
  labels:
    app: neuronews-dashboard
    component: frontend
    tier: presentation
  annotations:
    description: "Service for NeuroNews Streamlit Dashboard"
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  selector:
    app: neuronews-dashboard
  ports:
  - name: http
    port: 80
    targetPort: http
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: metrics
    protocol: TCP
  sessionAffinity: ClientIP
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 3600

---
apiVersion: v1
kind: Service
metadata:
  name: dashboard-loadbalancer
  namespace: neuronews
  labels:
    app: neuronews-dashboard
    component: loadbalancer
  annotations:
    description: "LoadBalancer service for external dashboard access"
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "tcp"
spec:
  type: LoadBalancer
  selector:
    app: neuronews-dashboard
  ports:
  - name: http
    port: 80
    targetPort: http
    protocol: TCP
  loadBalancerSourceRanges:
  - 0.0.0.0/0  # Configure this based on your security requirements
  externalTrafficPolicy: Local
