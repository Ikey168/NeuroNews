name: Neptune Knowledge Graph CI/CD

on:
  push:
    branches: [ main ]
    paths:
      - 'src/knowledge_graph/**'
      - 'deployment/terraform/neptune.tf'
      - 'deployment/terraform/scripts/neptune_schema.gremlin'
      - 'tests/knowledge_graph/**'
      - 'tests/integration/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/knowledge_graph/**'
      - 'deployment/terraform/neptune.tf'
      - 'deployment/terraform/scripts/neptune_schema.gremlin'
      - 'tests/knowledge_graph/**'
      - 'tests/integration/**'

env:
  AWS_REGION: us-west-2
  TF_WORKSPACE: development

jobs:
  test:
    name: Test Knowledge Graph Components
    runs-on: ubuntu-latest
    
    services:
      gremlin-server:
        image: tinkerpop/gremlin-server:3.6.2
        ports:
          - 8182:8182
        env:
          GREMLIN_SERVER_PORT: 8182
          JAVA_OPTS: "-Xmx1024m"
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'
        cache: 'pip'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          python3-dev \
          python3-setuptools \
          build-essential \
          gcc \
          jq \
          netcat-openbsd

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip wheel setuptools
        python -m pip install -r requirements.txt

    - name: Verify Dependencies
      run: |
        echo "Checking installed packages:"
        pip list
        echo "\nVerifying gremlinpython installation:"
        python -c "from gremlin_python import __version__; print(f'gremlinpython version: {__version__}')"

    - name: Run graph builder tests
      env:
        GREMLIN_SERVER_URL: ws://localhost:8182/gremlin
      run: |
        python -m pytest tests/knowledge_graph/test_graph_builder.py -v

    - name: Run graph query tests
      env:
        GREMLIN_SERVER_URL: ws://localhost:8182/gremlin
      run: |
        python -m pytest tests/knowledge_graph/test_graph_queries.py -v

    - name: Run integration tests
      env:
        NEPTUNE_ENDPOINT: localhost
        GREMLIN_SERVER_URL: ws://localhost:8182/gremlin
      run: |
        python -m pytest tests/integration/test_graph_integration.py -v

  deploy-dev:
    name: Deploy Neptune Infrastructure (Dev)
    needs: test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: development
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
    
    - name: Initialize Terraform
      run: |
        cd deployment/terraform
        terraform init
    
    - name: Terraform Plan
      run: |
        cd deployment/terraform
        terraform plan -var-file=terraform.tfvars -out=tfplan

    - name: Terraform Apply
      run: |
        cd deployment/terraform
        terraform apply -auto-approve tfplan

  initialize-schema:
    name: Initialize Neptune Schema
    needs: deploy-dev
    runs-on: ubuntu-latest
    environment: development
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Get Neptune Endpoint
      id: get-endpoint
      run: |
        ENDPOINT=$(aws neptune describe-db-clusters --query 'DBClusters[0].Endpoint' --output text)
        echo "NEPTUNE_ENDPOINT=$ENDPOINT" >> $GITHUB_ENV
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'
        cache: 'pip'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          python3-dev \
          python3-setuptools \
          build-essential \
          gcc

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip wheel setuptools
        python -m pip install -r requirements.txt

    - name: Initialize Neptune Schema
      run: |
        python deployment/terraform/lambda_functions/knowledge_graph_generator.py
      env:
        NEPTUNE_ENDPOINT: ${{ env.NEPTUNE_ENDPOINT }}

  validate-deployment:
    name: Validate Neptune Deployment
    needs: initialize-schema
    runs-on: ubuntu-latest
    environment: development
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Get Neptune Endpoint
      id: get-endpoint
      run: |
        ENDPOINT=$(aws neptune describe-db-clusters --query 'DBClusters[0].Endpoint' --output text)
        echo "NEPTUNE_ENDPOINT=$ENDPOINT" >> $GITHUB_ENV
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'
        cache: 'pip'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          python3-dev \
          python3-setuptools \
          build-essential \
          gcc

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip wheel setuptools
        python -m pip install -r requirements.txt

    - name: Run Validation Tests
      env:
        NEPTUNE_ENDPOINT: ${{ env.NEPTUNE_ENDPOINT }}
        GREMLIN_SERVER_URL: wss://${{ env.NEPTUNE_ENDPOINT }}:8182/gremlin
      run: |
        python -m pytest tests/integration/test_graph_integration.py::test_entity_relationship_tracking -v