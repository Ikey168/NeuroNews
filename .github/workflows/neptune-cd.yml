name: Neptune Knowledge Graph CI/CD

on:
  push:
    branches: [ main ]
    paths:
      - 'src/knowledge_graph/**'
      - 'deployment/terraform/neptune.tf'
      - 'deployment/terraform/scripts/neptune_schema.gremlin'
      - 'tests/knowledge_graph/**'
      - 'tests/integration/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/knowledge_graph/**'
      - 'deployment/terraform/neptune.tf'
      - 'deployment/terraform/scripts/neptune_schema.gremlin'
      - 'tests/knowledge_graph/**'
      - 'tests/integration/**'

env:
  AWS_REGION: us-west-2
  TF_WORKSPACE: development

jobs:
  test:
    name: Test Knowledge Graph Components
    runs-on: ubuntu-latest
    
    services:
      gremlin-server:
        image: tinkerpop/gremlin-server:3.6.2
        ports:
          - 8182:8182
        options: >-
          --health-cmd "curl -f http://localhost:8182/status || exit 1"
          --health-interval 20s
          --health-timeout 10s
          --health-retries 10
          --health-start-period 30s
        env:
          GREMLIN_SERVER_PORT: 8182
          JAVA_OPTS: "-Xmx1024m"
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov
        sudo apt-get update && sudo apt-get install -y curl jq

    - name: Monitor Gremlin Server
      run: |
        chmod +x .github/workflows/monitor-container.sh
        ./.github/workflows/monitor-container.sh

    - name: Run graph builder tests
      env:
        GREMLIN_SERVER_URL: ws://localhost:8182/gremlin
      run: |
        python -m pytest tests/knowledge_graph/test_graph_builder.py -v --cov=src/knowledge_graph

    - name: Run graph query tests
      env:
        GREMLIN_SERVER_URL: ws://localhost:8182/gremlin
      run: |
        python -m pytest tests/knowledge_graph/test_graph_queries.py -v --cov=src/knowledge_graph

    - name: Run integration tests
      env:
        NEPTUNE_ENDPOINT: localhost
        GREMLIN_SERVER_URL: ws://localhost:8182/gremlin
      run: |
        python -m pytest tests/integration/test_graph_integration.py -v

  deploy-dev:
    name: Deploy Neptune Infrastructure (Dev)
    needs: test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: development
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
    
    - name: Initialize Terraform
      run: |
        cd deployment/terraform
        terraform init
    
    - name: Terraform Plan
      run: |
        cd deployment/terraform
        terraform plan -var-file=terraform.tfvars -out=tfplan

    - name: Terraform Apply
      run: |
        cd deployment/terraform
        terraform apply -auto-approve tfplan

  initialize-schema:
    name: Initialize Neptune Schema
    needs: deploy-dev
    runs-on: ubuntu-latest
    environment: development
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Get Neptune Endpoint
      id: get-endpoint
      run: |
        ENDPOINT=$(aws neptune describe-db-clusters --query 'DBClusters[0].Endpoint' --output text)
        echo "NEPTUNE_ENDPOINT=$ENDPOINT" >> $GITHUB_ENV
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        sudo apt-get update && sudo apt-get install -y curl jq
    
    - name: Wait for Neptune Cluster
      run: |
        echo "Waiting for Neptune cluster to be available..."
        ATTEMPTS=0
        MAX_ATTEMPTS=30
        DELAY=10

        while [ $ATTEMPTS -lt $MAX_ATTEMPTS ]; do
          if curl -sf "https://${{ env.NEPTUNE_ENDPOINT }}:8182/status" > /dev/null; then
            echo "Neptune cluster is ready"
            exit 0
          fi
          ATTEMPTS=$((ATTEMPTS + 1))
          echo "Waiting for cluster to be ready... (attempt $ATTEMPTS/$MAX_ATTEMPTS)"
          sleep $DELAY
          DELAY=$(( DELAY < 60 ? DELAY * 2 : 60 ))
        done
        echo "Neptune cluster failed to become ready"
        exit 1

    - name: Initialize Neptune Schema
      run: |
        python deployment/terraform/lambda_functions/knowledge_graph_generator.py
      env:
        NEPTUNE_ENDPOINT: ${{ env.NEPTUNE_ENDPOINT }}

  validate-deployment:
    name: Validate Neptune Deployment
    needs: initialize-schema
    runs-on: ubuntu-latest
    environment: development
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Get Neptune Endpoint
      id: get-endpoint
      run: |
        ENDPOINT=$(aws neptune describe-db-clusters --query 'DBClusters[0].Endpoint' --output text)
        echo "NEPTUNE_ENDPOINT=$ENDPOINT" >> $GITHUB_ENV
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install gremlinpython requests
        sudo apt-get update && sudo apt-get install -y curl jq
    
    - name: Verify Graph Connectivity
      run: |
        python - <<EOF
        from gremlin_python.driver import client
        from gremlin_python.driver.protocol import GremlinServerError
        import time
        
        MAX_RETRIES = 5
        DELAY = 10
        
        for attempt in range(MAX_RETRIES):
          try:
            print(f"Connection attempt {attempt + 1}/{MAX_RETRIES}")
            c = client.Client(f'wss://${{ env.NEPTUNE_ENDPOINT }}:8182/gremlin', 'g')
            result = c.submit('g.V().count()').all().result()
            print(f"Graph contains {result[0]} vertices")
            if result[0] == 0:
              raise Exception("Graph is empty")
            break
          except GremlinServerError as e:
            print(f"Connection failed: {str(e)}")
            if attempt == MAX_RETRIES - 1:
              print(f"Failed to connect after {MAX_RETRIES} attempts")
              exit(1)
            print(f"Retrying in {DELAY} seconds...")
            time.sleep(DELAY)
            DELAY = min(DELAY * 2, 60)
          finally:
            if 'c' in locals():
              c.close()
        EOF

    - name: Run Validation Tests
      env:
        NEPTUNE_ENDPOINT: ${{ env.NEPTUNE_ENDPOINT }}
        GREMLIN_SERVER_URL: wss://${{ env.NEPTUNE_ENDPOINT }}:8182/gremlin
      run: |
        python -m pytest tests/integration/test_graph_integration.py::test_entity_relationship_tracking -v

    - name: Check Graph Health
      run: |
        response=$(curl -s https://${{ env.NEPTUNE_ENDPOINT }}:8182/status)
        echo "Graph health check response:"
        echo "$response" | jq '.'
        if ! echo "$response" | jq -e '.status == "healthy"' > /dev/null; then
          echo "Graph health check failed"
          exit 1
        fi