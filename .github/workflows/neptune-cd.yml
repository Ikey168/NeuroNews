name: Neptune Knowledge Graph CI/CD

on:
  push:
    branches: [ main ]
    paths:
      - 'src/knowledge_graph/**'
      - 'deployment/terraform/neptune.tf'
      - 'deployment/terraform/scripts/neptune_schema.gremlin'
      - 'tests/knowledge_graph/**'
      - 'tests/integration/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/knowledge_graph/**'
      - 'deployment/terraform/neptune.tf'
      - 'deployment/terraform/scripts/neptune_schema.gremlin'
      - 'tests/knowledge_graph/**'
      - 'tests/integration/**'

env:
  AWS_REGION: us-west-2
  TF_WORKSPACE: development

jobs:
  test:
    name: Test Knowledge Graph Components
    runs-on: ubuntu-latest
    
    services:
      gremlin-server:
        image: tinkerpop/gremlin-server:3.6.2
        ports:
          - 8182:8182
        env:
          GREMLIN_SERVER_PORT: 8182
          JAVA_OPTS: "-Xmx1024m"
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov
        sudo apt-get update && sudo apt-get install -y jq netcat-openbsd

    - name: Monitor Gremlin Server
      run: |
        chmod +x .github/workflows/monitor-container.sh
        sudo ./.github/workflows/monitor-container.sh

    - name: Run graph builder tests
      env:
        GREMLIN_SERVER_URL: ws://localhost:8182/gremlin
      run: |
        python -m pytest tests/knowledge_graph/test_graph_builder.py -v --cov=src/knowledge_graph

    - name: Run graph query tests
      env:
        GREMLIN_SERVER_URL: ws://localhost:8182/gremlin
      run: |
        python -m pytest tests/knowledge_graph/test_graph_queries.py -v --cov=src/knowledge_graph

    - name: Run integration tests
      env:
        NEPTUNE_ENDPOINT: localhost
        GREMLIN_SERVER_URL: ws://localhost:8182/gremlin
      run: |
        python -m pytest tests/integration/test_graph_integration.py -v

  deploy-dev:
    name: Deploy Neptune Infrastructure (Dev)
    needs: test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: development
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
    
    - name: Initialize Terraform
      run: |
        cd deployment/terraform
        terraform init
    
    - name: Terraform Plan
      run: |
        cd deployment/terraform
        terraform plan -var-file=terraform.tfvars -out=tfplan

    - name: Terraform Apply
      run: |
        cd deployment/terraform
        terraform apply -auto-approve tfplan

  initialize-schema:
    name: Initialize Neptune Schema
    needs: deploy-dev
    runs-on: ubuntu-latest
    environment: development
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Get Neptune Endpoint
      id: get-endpoint
      run: |
        ENDPOINT=$(aws neptune describe-db-clusters --query 'DBClusters[0].Endpoint' --output text)
        echo "NEPTUNE_ENDPOINT=$ENDPOINT" >> $GITHUB_ENV
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        sudo apt-get update && sudo apt-get install -y jq
    
    - name: Wait for Neptune Cluster
      run: |
        echo "Waiting for Neptune cluster to be available..."
        MAX_ATTEMPTS=30
        ATTEMPT=1
        DELAY=10
        
        while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
          echo "Connection attempt $ATTEMPT/$MAX_ATTEMPTS"
          if python3 - <<EOF
        from gremlin_python.driver import client
        try:
            c = client.Client('wss://${{ env.NEPTUNE_ENDPOINT }}:8182/gremlin', 'g')
            result = c.submit('g.V().count()').all().result()
            c.close()
            exit(0)
        except Exception as e:
            print(f"Connection failed: {str(e)}")
            exit(1)
        EOF
          then
            echo "Neptune cluster is ready"
            break
          fi
          
          ATTEMPT=$((ATTEMPT + 1))
          if [ $ATTEMPT -gt $MAX_ATTEMPTS ]; then
            echo "Neptune cluster failed to become ready"
            exit 1
          fi
          
          echo "Waiting ${DELAY} seconds before next attempt..."
          sleep $DELAY
          DELAY=$(( DELAY < 60 ? DELAY * 2 : 60 ))
        done

    - name: Initialize Neptune Schema
      run: |
        python deployment/terraform/lambda_functions/knowledge_graph_generator.py
      env:
        NEPTUNE_ENDPOINT: ${{ env.NEPTUNE_ENDPOINT }}

  validate-deployment:
    name: Validate Neptune Deployment
    needs: initialize-schema
    runs-on: ubuntu-latest
    environment: development
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Get Neptune Endpoint
      id: get-endpoint
      run: |
        ENDPOINT=$(aws neptune describe-db-clusters --query 'DBClusters[0].Endpoint' --output text)
        echo "NEPTUNE_ENDPOINT=$ENDPOINT" >> $GITHUB_ENV
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install gremlinpython requests
    
    - name: Verify Graph Connectivity
      run: |
        MAX_RETRIES=5
        DELAY=10
        ATTEMPT=1
        
        while [ $ATTEMPT -le $MAX_RETRIES ]; do
          echo "Attempt $ATTEMPT/$MAX_RETRIES"
          if python3 - <<EOF
        from gremlin_python.driver import client
        try:
            c = client.Client('wss://${{ env.NEPTUNE_ENDPOINT }}:8182/gremlin', 'g')
            result = c.submit('g.V().count()').all().result()
            print(f"Graph contains {result[0]} vertices")
            if result[0] == 0:
                raise Exception("Graph is empty")
            c.close()
            exit(0)
        except Exception as e:
            print(f"Error: {str(e)}")
            exit(1)
        EOF
          then
            echo "Graph connectivity verified"
            break
          fi
          
          ATTEMPT=$((ATTEMPT + 1))
          if [ $ATTEMPT -gt $MAX_RETRIES ]; then
            echo "Failed to verify graph connectivity"
            exit 1
          fi
          
          echo "Waiting ${DELAY} seconds before retry..."
          sleep $DELAY
          DELAY=$(( DELAY < 60 ? DELAY * 2 : 60 ))
        done

    - name: Run Validation Tests
      env:
        NEPTUNE_ENDPOINT: ${{ env.NEPTUNE_ENDPOINT }}
        GREMLIN_SERVER_URL: wss://${{ env.NEPTUNE_ENDPOINT }}:8182/gremlin
      run: |
        python -m pytest tests/integration/test_graph_integration.py::test_entity_relationship_tracking -v

    - name: Check Graph Health
      run: |
        python3 - <<EOF
        from gremlin_python.driver import client
        
        try:
            c = client.Client('wss://${{ env.NEPTUNE_ENDPOINT }}:8182/gremlin', 'g')
            # Run a simple query to verify the graph is responsive
            result = c.submit('g.V().count()').all().result()
            print(f"Graph health check successful - {result[0]} vertices found")
            c.close()
            exit(0)
        except Exception as e:
            print(f"Graph health check failed: {str(e)}")
            exit(1)
        EOF