name: Iceberg Table Contracts Check

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'dbt/models/marts/**'
      - 'jobs/iceberg_contract_check.py'
      - '.github/workflows/iceberg-contracts.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'dbt/models/marts/**'
      - 'jobs/iceberg_contract_check.py'
      - '.github/workflows/iceberg-contracts.yml'

jobs:
  iceberg-contract-validation:
    runs-on: ubuntu-latest
    
    services:
      # MinIO for S3-compatible storage
      minio:
        image: minio/minio:latest
        ports:
          - 9000:9000
          - 9001:9001
        env:
          MINIO_ROOT_USER: minioadmin
          MINIO_ROOT_PASSWORD: minioadmin
        options: >-
          --health-cmd "curl -f http://localhost:9000/minio/health/live"
          --health-interval 30s
          --health-timeout 20s
          --health-retries 3
        volumes:
          - /tmp/minio-data:/data
        command: server /data --console-address ":9001"
      
      # REST Catalog for Iceberg
      iceberg-rest:
        image: tabulario/iceberg-rest:latest
        ports:
          - 8181:8181
        env:
          CATALOG_WAREHOUSE: s3a://demo-warehouse/
          CATALOG_IO__IMPL: org.apache.iceberg.aws.s3.S3FileIO
          CATALOG_S3_ENDPOINT: http://minio:9000
          CATALOG_S3_ACCESS_KEY_ID: minioadmin
          CATALOG_S3_SECRET_ACCESS_KEY: minioadmin
          CATALOG_S3_PATH_STYLE_ACCESS: true
        depends_on:
          - minio

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Set up Java (for Spark)
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '11'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyspark==3.4.0
        pip install pyiceberg[s3fs,pyarrow]
        pip install pyyaml
        pip install boto3

    - name: Wait for services
      run: |
        echo "Waiting for MinIO..."
        timeout 60 bash -c 'until curl -s http://localhost:9000/minio/health/live; do sleep 2; done'
        echo "Waiting for Iceberg REST catalog..."
        timeout 60 bash -c 'until curl -s http://localhost:8181/v1/config; do sleep 2; done'

    - name: Setup MinIO buckets
      run: |
        # Install MinIO client
        wget https://dl.min.io/client/mc/release/linux-amd64/mc
        chmod +x mc
        sudo mv mc /usr/local/bin/
        
        # Configure MinIO client
        mc alias set minio http://localhost:9000 minioadmin minioadmin
        
        # Create demo warehouse bucket
        mc mb minio/demo-warehouse

    - name: Create test Iceberg tables
      run: |
        python -c "
import os
from pyspark.sql import SparkSession
from pyspark.sql.types import StructType, StructField, StringType, IntegerType, TimestampType, BooleanType, DoubleType

# Create Spark session with Iceberg support
spark = SparkSession.builder \
    .appName('IcebergTableSetup') \
    .config('spark.sql.catalog.demo', 'org.apache.iceberg.spark.SparkCatalog') \
    .config('spark.sql.catalog.demo.catalog-impl', 'org.apache.iceberg.rest.RESTCatalog') \
    .config('spark.sql.catalog.demo.uri', 'http://localhost:8181') \
    .config('spark.sql.catalog.demo.warehouse', 's3a://demo-warehouse/') \
    .config('spark.sql.catalog.demo.io-impl', 'org.apache.iceberg.aws.s3.S3FileIO') \
    .config('spark.hadoop.fs.s3a.access.key', 'minioadmin') \
    .config('spark.hadoop.fs.s3a.secret.key', 'minioadmin') \
    .config('spark.hadoop.fs.s3a.endpoint', 'http://localhost:9000') \
    .config('spark.hadoop.fs.s3a.path.style.access', 'true') \
    .config('spark.sql.extensions', 'org.apache.iceberg.spark.extensions.IcebergSparkSessionExtensions') \
    .getOrCreate()

# Create demo database
spark.sql('CREATE DATABASE IF NOT EXISTS demo')
spark.sql('CREATE DATABASE IF NOT EXISTS demo.marts')

# Create fact_articles table with expected schema and properties
spark.sql('''
CREATE TABLE demo.marts.fact_articles (
    article_id string NOT NULL,
    url string NOT NULL,
    title string NOT NULL,
    content string,
    summary string,
    source string NOT NULL,
    category string,
    language string NOT NULL,
    published_at timestamp NOT NULL,
    processed_at timestamp NOT NULL,
    is_valid_row boolean NOT NULL,
    hours_since_processed double,
    year int NOT NULL,
    month int NOT NULL,
    day int NOT NULL,
    hour int NOT NULL
) USING iceberg
PARTITIONED BY (year, month)
TBLPROPERTIES (
    'write.format.default' = 'parquet',
    'write.parquet.compression-codec' = 'snappy',
    'history.expire.max-snapshot-age-ms' = '432000000',
    'history.expire.min-snapshots-to-keep' = '5',
    'delete.mode' = 'merge-on-read'
)
''')

# Create dim_sources table
spark.sql('''
CREATE TABLE demo.marts.dim_sources (
    source_id string NOT NULL,
    source_name string NOT NULL,
    source_url string,
    source_type string,
    is_active boolean NOT NULL,
    created_at timestamp NOT NULL,
    updated_at timestamp NOT NULL
) USING iceberg
TBLPROPERTIES (
    'write.format.default' = 'parquet',
    'write.parquet.compression-codec' = 'snappy',
    'delete.mode' = 'copy-on-write'
)
''')

print('‚úÖ Test Iceberg tables created successfully')
spark.stop()
        "

    - name: Run Iceberg contract validation
      run: |
        python jobs/iceberg_contract_check.py \
          --config dbt/models/marts/table_contracts.yml \
          --all-tables \
          --table-prefix demo.marts \
          --output contract_violations.json \
          --verbose

    - name: Upload contract violation report
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: contract-violations
        path: contract_violations.json

    - name: Comment on PR with violations
      if: failure() && github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          
          try {
            const violations = JSON.parse(fs.readFileSync('contract_violations.json', 'utf8'));
            
            if (violations.total_violations > 0) {
              let comment = `## ‚ùå Iceberg Table Contract Violations\n\n`;
              comment += `Found **${violations.total_violations}** contract violations:\n\n`;
              
              const violationsByTable = {};
              violations.violations.forEach(v => {
                if (!violationsByTable[v.table_name]) {
                  violationsByTable[v.table_name] = [];
                }
                violationsByTable[v.table_name].push(v);
              });
              
              for (const [tableName, tableViolations] of Object.entries(violationsByTable)) {
                comment += `### üìã Table: \`${tableName}\`\n\n`;
                tableViolations.forEach(v => {
                  comment += `- **${v.violation_type.replace(/_/g, ' ')}**: ${v.description}\n`;
                  comment += `  - Expected: \`${v.expected}\`\n`;
                  comment += `  - Actual: \`${v.actual}\`\n\n`;
                });
              }
              
              comment += `\n---\n`;
              comment += `üí° **Fix these violations** by updating your table definitions or the contract specifications.\n`;
              comment += `üìñ See the [Iceberg contracts documentation](docs/data-contracts.md) for guidance.`;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }
          } catch (error) {
            console.log('Could not read or parse violations file');
          }

    - name: Fail job if violations found
      run: |
        if [ -f "contract_violations.json" ]; then
          violations=$(python -c "import json; data=json.load(open('contract_violations.json')); print(data['total_violations'])")
          if [ "$violations" -gt 0 ]; then
            echo "‚ùå Contract validation failed with $violations violations"
            exit 1
          fi
        fi
        echo "‚úÖ All Iceberg table contracts validated successfully"
