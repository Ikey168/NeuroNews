name: Deploy

on:
  workflow_run:
    workflows: ["Tests"]
    types:
      - completed
    branches: [main]

env:
  AWS_REGION: us-east-1
  AWS_CODEDEPLOY_APP: neuronews
  AWS_CODEDEPLOY_GROUP: neuronews-group

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    environment: production
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
    
    - name: Terraform Init
      run: |
        cd deployment/terraform
        terraform init

    - name: Terraform Plan
      run: |
        cd deployment/terraform
        terraform plan -out=tfplan

    - name: Terraform Apply
      run: |
        cd deployment/terraform
        terraform apply -auto-approve tfplan

    - name: Create deployment package
      run: |
        zip -r deploy.zip . -x "*.git*" "*.terraform*" "*.zip"

    - name: Create S3 bucket if not exists
      run: |
        aws s3api head-bucket --bucket ${{ env.AWS_CODEDEPLOY_APP }}-artifacts 2>/dev/null || \
        aws s3 mb s3://${{ env.AWS_CODEDEPLOY_APP }}-artifacts

    - name: Upload to S3
      run: |
        aws s3 cp deploy.zip s3://${{ env.AWS_CODEDEPLOY_APP }}-artifacts/deploy.zip

    - name: Create CodeDeploy Application
      run: |
        aws deploy get-application --application-name ${{ env.AWS_CODEDEPLOY_APP }} 2>/dev/null || \
        aws deploy create-application --application-name ${{ env.AWS_CODEDEPLOY_APP }}

    - name: Create CodeDeploy Deployment Group
      run: |
        aws deploy get-deployment-group \
          --application-name ${{ env.AWS_CODEDEPLOY_APP }} \
          --deployment-group-name ${{ env.AWS_CODEDEPLOY_GROUP }} 2>/dev/null || \
        aws deploy create-deployment-group \
          --application-name ${{ env.AWS_CODEDEPLOY_APP }} \
          --deployment-group-name ${{ env.AWS_CODEDEPLOY_GROUP }} \
          --service-role-arn ${{ secrets.AWS_CODEDEPLOY_SERVICE_ROLE }} \
          --deployment-style deploymentType=IN_PLACE,deploymentOption=WITH_TRAFFIC_CONTROL \
          --ec2-tag-set Key=Environment,Value=Production

    - name: Deploy to EC2
      run: |
        aws deploy create-deployment \
          --application-name ${{ env.AWS_CODEDEPLOY_APP }} \
          --deployment-group-name ${{ env.AWS_CODEDEPLOY_GROUP }} \
          --s3-location bucket=${{ env.AWS_CODEDEPLOY_APP }}-artifacts,key=deploy.zip,bundleType=zip