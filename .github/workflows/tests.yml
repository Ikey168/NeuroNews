name: Tests

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      gremlin-server:
        image: tinkerpop/gremlin-server:3.6.2
        ports:
          - 8182:8182
        options: >-
          --health-cmd "curl -f http://localhost:8182/status || exit 1"
          --health-interval 20s
          --health-timeout 10s
          --health-retries 10
          --health-start-period 30s
        env:
          GREMLIN_SERVER_PORT: 8182
          JAVA_OPTS: "-Xmx1024m"
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Verify Gremlin Server
      run: |
        echo "Installing curl..."
        sudo apt-get update && sudo apt-get install -y curl
        
        echo "Waiting for Gremlin server to be ready..."
        for i in {1..30}; do
          if curl -s http://localhost:8182/status | grep -q "ready"; then
            echo "Gremlin server is ready"
            exit 0
          fi
          echo "Waiting for server to start... (attempt $i)"
          sleep 5
        done
        echo "Gremlin server failed to start"
        exit 1

    - name: Run base pipeline tests
      run: |
        python -m pytest tests/test_base_pipelines.py -v

    - name: Run base NLP tests
      run: |
        python -m pytest tests/test_base_nlp.py -v

    - name: Run unit tests
      run: |
        python -m pytest tests/ -v --ignore=tests/nlp/test_sentiment.py --ignore=tests/integration

    - name: Run integration tests
      env:
        NEPTUNE_ENDPOINT: localhost
        GREMLIN_SERVER_URL: ws://localhost:8182/gremlin
      run: |
        python -m pytest tests/integration/test_graph_integration.py -v

  terraform:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      
    - name: Initialize Terraform
      run: |
        cd deployment/terraform
        terraform init -backend=false
      
    - name: Validate Terraform Configuration
      run: |
        cd deployment/terraform
        terraform validate