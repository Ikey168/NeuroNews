name: Tests

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      gremlin-server:
        image: tinkerpop/gremlin-server:3.6.2
        ports:
          - 8182:8182
        env:
          GREMLIN_SERVER_PORT: 8182
          JAVA_OPTS: "-Xmx1024m"
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'
        cache: 'pip'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          python3-dev \
          python3-setuptools \
          build-essential \
          gcc \
          jq \
          netcat-openbsd

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip wheel setuptools
        python -m pip install -r requirements.txt

    - name: Download NLTK data and spaCy models
      run: |
        python -c "import nltk; nltk.download('punkt'); nltk.download('stopwords'); nltk.download('averaged_perceptron_tagger')"
        python -m spacy download en_core_web_sm

    - name: Verify Dependencies
      run: |
        echo "Checking installed packages:"
        pip list
        echo "\nVerifying gremlinpython installation:"
        python -c "from gremlin_python import __version__; print(f'gremlinpython version: {__version__}')"

    - name: Debug Container Status
      run: |
        echo "Docker version:"
        docker version
        
        echo "\nDocker info:"
        docker info
        
        echo "\nListing all containers:"
        docker ps -a
        
        echo "\nContainer details:"
        CONTAINER_ID=$(docker ps -q -f "ancestor=tinkerpop/gremlin-server:3.6.2" || \
                      docker ps -q -f "name=gremlin-server" || \
                      docker ps -q -f "name=*_gremlin-server_*")
        if [ -n "$CONTAINER_ID" ]; then
          echo "Found container: $CONTAINER_ID"
          echo "\nContainer logs:"
          docker logs $CONTAINER_ID
          echo "\nContainer inspection:"
          docker inspect $CONTAINER_ID | jq '.[0].State'
          echo "\nContainer network settings:"
          docker inspect $CONTAINER_ID | jq '.[0].NetworkSettings'
        else
          echo "No Gremlin server container found"
        fi

    - name: Monitor Gremlin Server
      run: |
        chmod +x .github/workflows/monitor-container.sh
        sudo ./.github/workflows/monitor-container.sh

    - name: Run base pipeline tests
      run: |
        python -m pytest tests/test_base_pipelines.py -v

    - name: Run base NLP tests
      run: |
        python -m pytest tests/test_base_nlp.py -v

    - name: Run unit tests
      run: |
        python -m pytest tests/ -v --ignore=tests/nlp/test_sentiment.py --ignore=tests/integration --ignore=tests/test_ner.py

    - name: Run integration tests
      env:
        NEPTUNE_ENDPOINT: localhost
        GREMLIN_SERVER_URL: ws://localhost:8182/gremlin
      run: |
        python -m pytest tests/integration/test_graph_integration.py -v

  terraform:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      
    - name: Initialize Terraform
      run: |
        cd deployment/terraform
        terraform init -backend=false
      
    - name: Validate Terraform Configuration
      run: |
        cd deployment/terraform
        terraform validate