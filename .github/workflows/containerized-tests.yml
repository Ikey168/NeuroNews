name: Containerized CI/CD Tests

on:
  push:
    branches: [ main, develop, 31-cluster-related-articles-event-detection ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Containerized connectivity tests
  test-connectivity:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Update containerization verification for GitHub Actions
      run: |
        echo "üöÄ Running NeuroNews Containerization Tests"
        # Update docker-compose command for GitHub Actions compatibility
        sed -i 's/docker-compose --version/docker compose version/g' validation/verify_containerization.py
        python validation/verify_containerization.py

    - name: Test minimal containerized services
      run: |
        echo "üîß Testing minimal containerized services..."
        docker compose -f docker-compose.test-minimal.yml up --build --abort-on-container-exit --exit-code-from test-minimal
      timeout-minutes: 10

    - name: Clean up containers
      if: always()
      run: |
        docker compose -f docker-compose.test-minimal.yml down --volumes --remove-orphans
        docker system prune -f

  # Build verification
  build-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build simple Docker image
      run: |
        echo "üèóÔ∏è Building simplified Docker image..."
        docker build -f Dockerfile.simple -t neuronews-simple .

    - name: Test container functionality
      run: |
        echo "üß™ Testing container functionality..."
        docker run --rm neuronews-simple python -c "import psycopg2, redis, boto3; print('‚úÖ All dependencies working')"

    - name: Test database connectivity script
      run: |
        echo "üîó Testing connectivity script..."
        docker run --rm neuronews-simple python -c "
        import test_connectivity
        print('‚úÖ Connectivity test script loads successfully')
        "

  # Integration test with services
  integration-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Start background services
      run: |
        echo "üóÑÔ∏è Starting PostgreSQL and Redis services..."
        docker compose -f docker-compose.test-minimal.yml up -d test-postgres test-redis

    - name: Wait for services to be ready
      run: |
        echo "‚è≥ Waiting for services to be ready..."
        timeout 60 bash -c 'until docker compose -f docker-compose.test-minimal.yml exec -T test-postgres pg_isready -U test_user; do sleep 2; done'
        timeout 60 bash -c 'until docker compose -f docker-compose.test-minimal.yml exec -T test-redis redis-cli ping; do sleep 2; done'

    - name: Run connectivity tests against live services
      run: |
        echo "üîç Testing connectivity against live services..."
        docker compose -f docker-compose.test-minimal.yml run --rm test-minimal python test_connectivity.py
      env:
        DB_HOST: test-postgres
        DB_PORT: 5432
        DB_NAME: neuronews_test
        DB_USER: test_user
        DB_PASSWORD: test_password
        REDIS_HOST: test-redis
        REDIS_PORT: 6379
        S3_ENDPOINT: http://test-minio:9000
        S3_ACCESS_KEY: testuser
        S3_SECRET_KEY: testpassword
        S3_BUCKET: test-bucket

    - name: Clean up integration test
      if: always()
      run: |
        docker compose -f docker-compose.test-minimal.yml down --volumes --remove-orphans
        docker system prune -f

  # Summary job
  test-summary:
    runs-on: ubuntu-latest
    needs: [test-connectivity, build-test, integration-test]
    if: always()
    
    steps:
    - name: Test Results Summary
      run: |
        echo "üìä NeuroNews Containerization Test Results:"
        echo "‚úÖ Connectivity Tests: ${{ needs.test-connectivity.result }}"
        echo "‚úÖ Build Tests: ${{ needs.build-test.result }}"
        echo "‚úÖ Integration Tests: ${{ needs.integration-test.result }}"
        
        if [[ "${{ needs.test-connectivity.result }}" == "success" && 
              "${{ needs.build-test.result }}" == "success" && 
              "${{ needs.integration-test.result }}" == "success" ]]; then
          echo "üéâ ALL CONTAINERIZATION TESTS PASSED!"
          echo "‚ú® The containerized solution is working perfectly!"
        else
          echo "‚ö†Ô∏è Some tests failed, please check the logs above"
          exit 1
        fi
