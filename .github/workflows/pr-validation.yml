name: PR Validation Pipeline

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Changed files detection
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      api: ${{ steps.changes.outputs.api }}
      dashboard: ${{ steps.changes.outputs.dashboard }}
      scraper: ${{ steps.changes.outputs.scraper }}
      nlp: ${{ steps.changes.outputs.nlp }}
      k8s: ${{ steps.changes.outputs.k8s }}
      workflows: ${{ steps.changes.outputs.workflows }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check for changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            api:
              - 'src/api/**'
              - 'src/database/**'
              - 'requirements.txt'
            dashboard:
              - 'src/dashboards/**'
              - 'package.json'
              - 'package-lock.json'
            scraper:
              - 'src/scraper/**'
              - 'src/ingestion/**'
            nlp:
              - 'src/nlp/**'
              - 'src/ai/**'
            k8s:
              - 'k8s/**'
              - 'helm/**'
            workflows:
              - '.github/workflows/**'

  # Code quality checks
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black isort flake8 mypy bandit
          pip install -r requirements.txt

      - name: Run Black (Python formatter)
        run: black --check --diff src/ tests/

      - name: Run isort (Import sorter)
        run: isort --check-only --diff src/ tests/

      - name: Run Flake8 (Linting)
        run: flake8 src/ tests/ --max-line-length=88 --extend-ignore=E203,W503

      - name: Run MyPy (Type checking)
        run: mypy src/ --ignore-missing-imports

      - name: Run Bandit (Security analysis)
        run: bandit -r src/ -f json -o bandit-report.json || true

      - name: Upload Bandit report
        uses: actions/upload-artifact@v3
        with:
          name: bandit-security-report
          path: bandit-report.json

  # Kubernetes manifest validation
  k8s-validation:
    name: Kubernetes Validation
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.k8s == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3

      - name: Validate Kubernetes manifests
        run: |
          # Validate YAML syntax
          find k8s/ -name "*.yaml" -o -name "*.yml" | xargs -I {} kubectl apply --dry-run=client -f {}
          
          # Check for best practices with kube-score
          wget -O kube-score https://github.com/zegl/kube-score/releases/latest/download/kube-score_linux_amd64
          chmod +x kube-score
          
          find k8s/ -name "*.yaml" -o -name "*.yml" | xargs ./kube-score score || true

      - name: Kubeval validation
        run: |
          # Download and run kubeval
          wget -O kubeval.tar.gz https://github.com/instrumenta/kubeval/releases/latest/download/kubeval-linux-amd64.tar.gz
          tar xf kubeval.tar.gz
          chmod +x kubeval
          
          find k8s/ -name "*.yaml" -o -name "*.yml" | xargs ./kubeval

  # Security scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy filesystem scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-fs-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-fs-results.sarif'

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: python, javascript

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # Unit tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11]
        component: [api, scraper, nlp]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio pytest-mock

      - name: Run tests for ${{ matrix.component }}
        run: |
          python -m pytest tests/${{ matrix.component }}/ -v \
            --cov=src/${{ matrix.component }} \
            --cov-report=xml \
            --cov-report=html \
            --junitxml=pytest-${{ matrix.component }}.xml
        env:
          ENVIRONMENT: test

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: ${{ matrix.component }}
          name: ${{ matrix.component }}-coverage

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.component }}
          path: |
            pytest-${{ matrix.component }}.xml
            htmlcov/

  # Build test images
  build-test-images:
    name: Build Test Images
    runs-on: ubuntu-latest
    needs: [changes, unit-tests]
    if: |
      needs.changes.outputs.api == 'true' ||
      needs.changes.outputs.dashboard == 'true' ||
      needs.changes.outputs.scraper == 'true' ||
      needs.changes.outputs.nlp == 'true'

    strategy:
      matrix:
        service: [api, dashboard, scraper, nlp-processor]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build test image for ${{ matrix.service }}
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/${{ matrix.service }}/Dockerfile
          push: false
          tags: neuronews/${{ matrix.service }}:pr-${{ github.event.number }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          load: true

      - name: Test container startup
        run: |
          # Test that container starts successfully
          docker run --rm -d --name test-${{ matrix.service }} \
            neuronews/${{ matrix.service }}:pr-${{ github.event.number }}
          
          # Wait for startup
          sleep 10
          
          # Check if container is still running
          if docker ps | grep test-${{ matrix.service }}; then
            echo "Container started successfully"
            docker stop test-${{ matrix.service }}
          else
            echo "Container failed to start"
            docker logs test-${{ matrix.service }} || true
            exit 1
          fi

      - name: Scan test image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: neuronews/${{ matrix.service }}:pr-${{ github.event.number }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

  # Integration tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build-test-images]
    if: success()

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_USER: testuser
          POSTGRES_DB: neuronews_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio requests

      - name: Run integration tests
        run: |
          python -m pytest tests/integration/ -v --tb=short
        env:
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/neuronews_test
          REDIS_URL: redis://localhost:6379
          ENVIRONMENT: test

  # Documentation validation
  docs-validation:
    name: Documentation Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for documentation updates
        run: |
          # Check if code changes require documentation updates
          if git diff --name-only origin/main...HEAD | grep -E "(src/|k8s/)" && \
             ! git diff --name-only origin/main...HEAD | grep -E "(README\.md|docs/|\.md$)"; then
            echo "Code changes detected without documentation updates"
            echo "Please update relevant documentation"
            exit 1
          fi

      - name: Validate markdown files
        uses: DavidAnson/markdownlint-action@v1
        with:
          files: '**/*.md'
          config: '.markdownlint.json'

      - name: Check for broken links
        uses: lycheeverse/lychee-action@v1
        with:
          args: --verbose --no-progress '**/*.md'

  # Performance testing
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [build-test-images]
    if: contains(github.event.pull_request.labels.*.name, 'performance-test')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up k6
        run: |
          sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Run performance tests
        run: |
          k6 run tests/performance/load-test.js \
            --env BASE_URL=http://localhost:8000 \
            --env DURATION=5m \
            --env VUS=10

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-test-results
          path: performance-results.json

  # PR summary and status
  pr-summary:
    name: PR Summary
    runs-on: ubuntu-latest
    needs: [
      code-quality,
      k8s-validation,
      security-scan,
      unit-tests,
      build-test-images,
      integration-tests,
      docs-validation
    ]
    if: always()

    steps:
      - name: Generate PR summary
        uses: actions/github-script@v6
        with:
          script: |
            const { owner, repo } = context.repo;
            const pr_number = context.issue.number;
            
            const jobs = [
              { name: 'Code Quality', status: '${{ needs.code-quality.result }}' },
              { name: 'K8s Validation', status: '${{ needs.k8s-validation.result }}' },
              { name: 'Security Scan', status: '${{ needs.security-scan.result }}' },
              { name: 'Unit Tests', status: '${{ needs.unit-tests.result }}' },
              { name: 'Build Test Images', status: '${{ needs.build-test-images.result }}' },
              { name: 'Integration Tests', status: '${{ needs.integration-tests.result }}' },
              { name: 'Documentation', status: '${{ needs.docs-validation.result }}' }
            ];
            
            const statusEmoji = {
              'success': '✅',
              'failure': '❌',
              'cancelled': '⏹️',
              'skipped': '⏭️'
            };
            
            let summary = '## 🔍 PR Validation Summary\n\n';
            let allPassed = true;
            
            for (const job of jobs) {
              const emoji = statusEmoji[job.status] || '❓';
              summary += `${emoji} **${job.name}**: ${job.status}\n`;
              if (job.status === 'failure') allPassed = false;
            }
            
            summary += '\n---\n';
            
            if (allPassed) {
              summary += '🎉 **All checks passed!** This PR is ready for review.\n';
            } else {
              summary += '⚠️ **Some checks failed.** Please review and fix the issues above.\n';
            }
            
            summary += `\n📊 **Pipeline Run**: [#${{ github.run_number }}](${context.payload.repository.html_url}/actions/runs/${{ github.run_id }})`;
            
            // Update or create PR comment
            const { data: comments } = await github.rest.issues.listComments({
              owner,
              repo,
              issue_number: pr_number
            });
            
            const botComment = comments.find(comment => 
              comment.user.login === 'github-actions[bot]' && 
              comment.body.includes('PR Validation Summary')
            );
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner,
                repo,
                comment_id: botComment.id,
                body: summary
              });
            } else {
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: pr_number,
                body: summary
              });
            }
