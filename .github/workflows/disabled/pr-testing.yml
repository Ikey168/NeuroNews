name: Pull Request Testing

on:
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened]

env:
  PYTHONPATH: ${{ github.workspace }}

jobs:
  # Job 1: Code quality checks
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety

      # - name: Check code formatting
      #   run: |
      #     black --check --diff src/ tests/
      #   continue-on-error: true

      # - name: Check import sorting
      #   run: |
      #     isort --check-only --diff src/ tests/
      #   continue-on-error: true

      # - name: Lint with flake8
      #   run: |
      #     flake8 src/ tests/ --max-line-length=100 --extend-ignore=E203,W503 --output-file=flake8-report.txt
      #   continue-on-error: true

      # - name: Type checking with mypy
      #   run: |
      #     mypy src/ --ignore-missing-imports --output=mypy-report.txt
        continue-on-error: true

      - name: Security check with bandit
        run: |
          bandit -r src/ -f txt -o bandit-report.txt
        continue-on-error: true

      - name: Upload quality reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: code-quality-reports
          path: |
            bandit-report.txt

  # Job 2: Unit tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio pytest-mock

      - name: Run unit tests
        run: |
          pytest tests/ -v --cov=src/ --cov-report=xml --cov-report=term-missing --ignore=tests/integration/
        
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests-${{ matrix.python-version }}
          name: codecov-umbrella

  # Job 3: Integration tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: neuronews_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio

      - name: Wait for services
        run: |
          # Wait for PostgreSQL
          while ! pg_isready -h localhost -p 5432; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done
          
          # Wait for Redis
          while ! redis-cli -h localhost -p 6379 ping; do
            echo "Waiting for Redis..."
            sleep 2
          done

      - name: Run integration tests
        run: |
          pytest tests/integration/ -v --tb=short
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/neuronews_test
          REDIS_URL: redis://localhost:6379
          TEST_ENVIRONMENT: true

  # Job 4: Docker build test
  docker-build-test:
    name: Docker Build Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [api, scrapers, dashboard, nlp]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create Dockerfile if missing
        run: |
          if [ ! -f "Dockerfile.${{ matrix.service }}" ]; then
            echo "Creating Dockerfile.${{ matrix.service }}"
            cat > Dockerfile.${{ matrix.service }} << 'EOF'
          FROM python:3.11-slim
          
          WORKDIR /app
          
          # Copy requirements
          COPY requirements.txt .
          RUN pip install --no-cache-dir -r requirements.txt
          
          # Copy source code
          COPY src/ ./src/
          
          # Create non-root user
          RUN groupadd -r neuronews && useradd -r -g neuronews neuronews
          RUN chown -R neuronews:neuronews /app
          USER neuronews
          
          # Health check
          HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
            CMD python -c "import requests; requests.get('http://localhost:8000/health')"
          
          # Default command
          CMD ["python", "-m", "src.api.app"]
          EOF
          fi

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.${{ matrix.service }}
          push: false
          tags: neuronews-${{ matrix.service }}:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          # Run basic container test
          docker run --rm neuronews-${{ matrix.service }}:test python -c "print('Container test passed')"

  # Job 5: Performance tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: contains(github.event.pull_request.labels.*.name, 'performance-test')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install locust

      - name: Run performance tests
        run: |
          if [ -f "tests/performance/locustfile.py" ]; then
            locust -f tests/performance/locustfile.py --headless -u 10 -r 2 -t 60s --host=http://localhost:8000
          else
            echo "No performance tests found, skipping..."
          fi

  # Job 6: Security scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'table'
          exit-code: '0'  # Don't fail on vulnerabilities in PR

      - name: Run Semgrep security scan
        uses: semgrep/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten

  # Job 7: Documentation check
  docs-check:
    name: Documentation Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for documentation updates
        run: |
          # Check if code changes require documentation updates
          git diff --name-only origin/main...HEAD > changed_files.txt
          
          if grep -E "\.(py|js|ts)$" changed_files.txt > /dev/null; then
            echo "Code changes detected. Checking for documentation..."
            
            if ! grep -E "\.(md|rst)$" changed_files.txt > /dev/null; then
              echo "⚠️ Code changes found but no documentation updates detected."
              echo "Consider updating relevant documentation."
            else
              echo "✅ Documentation updates found."
            fi
          fi

      # - name: Validate markdown files
      #   run: |
      #     # Install markdownlint
      #     npm install -g markdownlint-cli
      #     
      #     # Lint markdown files
      #     markdownlint --ignore node_modules --ignore .git . || true

  # Job 8: Comment on PR with results
  pr-comment:
    name: PR Comment
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests, integration-tests, docker-build-test, security-scan]
    if: always()
    
    steps:
      - name: Comment PR
        uses: actions/github-script@v6
        with:
          script: |
            const { data: checkRuns } = await github.rest.checks.listForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
            });
            
            let comment = '## 🔍 Pull Request Testing Results\n\n';
            
            const jobs = [
              { name: 'Code Quality', needed: true },
              { name: 'Unit Tests', needed: true },
              { name: 'Integration Tests', needed: true },
              { name: 'Docker Build Test', needed: true },
              { name: 'Security Scan', needed: true }
            ];
            
            jobs.forEach(job => {
              const status = '${{ needs[job.name.toLowerCase().replace(/ /g, '-')].result }}';
              const emoji = status === 'success' ? '✅' : status === 'failure' ? '❌' : '⏳';
              comment += `${emoji} **${job.name}**: ${status}\n`;
            });
            
            comment += '\n---\n';
            comment += '*This comment was automatically generated by the CI/CD pipeline.*';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
