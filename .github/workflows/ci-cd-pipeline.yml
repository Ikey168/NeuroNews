name: NeuroNews CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  pull_request:
    branches: [main]
    paths-ignore:
      - '**.md'
      - 'docs/**'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job 1: Run tests and quality checks
  test:
    name: Test & Quality Checks
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio black flake8 bandit safety

      - name: Code formatting check
        run: |
          black --check --diff src/ tests/

      - name: Lint code
        run: |
          flake8 src/ tests/ --max-line-length=100 --extend-ignore=E203,W503

      - name: Security scan - Bandit
        run: |
          bandit -r src/ -f json -o bandit-report.json || true

      - name: Dependency vulnerability scan
        run: |
          safety check --json --output safety-report.json || true

      - name: Run unit tests
        run: |
          pytest tests/unit/ --cov=src/ --cov-report=xml --cov-report=html --cov-fail-under=70
        env:
          PYTHONPATH: ${{ github.workspace }}

      - name: Run integration tests
        run: |
          pytest tests/integration/ -v --tb=short
        env:
          PYTHONPATH: ${{ github.workspace }}

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.python-version }}
          path: |
            htmlcov/
            bandit-report.json
            safety-report.json

  # Job 2: Security scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner in repo mode
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Trivy scanner for critical vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          exit-code: '1'
          severity: 'CRITICAL,HIGH'

  # Job 3: Build and push Docker images
  build-and-push:
    name: Build & Push Images
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    strategy:
      matrix:
        service:
          - name: api
            dockerfile: Dockerfile.api
            context: .
          - name: scrapers
            dockerfile: Dockerfile.scrapers
            context: .
          - name: dashboard
            dockerfile: Dockerfile.dashboard
            context: .
          - name: nlp
            dockerfile: Dockerfile.nlp
            context: .

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service.name }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.service.context }}
          file: ${{ matrix.service.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Scan Docker image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service.name }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-image-${{ matrix.service.name }}.sarif'

      - name: Upload image scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-image-${{ matrix.service.name }}.sarif'

  # Job 4: Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure kubectl
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBECONFIG_STAGING }}

      - name: Create namespace if not exists
        run: |
          kubectl create namespace neuronews-staging --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy to staging
        run: |
          # Update image tags in deployment manifests
          cd k8s/staging
          
          # Replace image tags with current commit SHA
          find . -name "*.yaml" -exec sed -i "s|:latest|:${{ github.sha }}|g" {} \;
          
          # Apply all manifests
          kubectl apply -f . -n neuronews-staging

      - name: Wait for deployment rollout
        run: |
          kubectl rollout status deployment/neuronews-api -n neuronews-staging --timeout=300s
          kubectl rollout status deployment/neuronews-dashboard -n neuronews-staging --timeout=300s

      - name: Run smoke tests
        run: |
          chmod +x scripts/smoke-tests.sh
          ./scripts/smoke-tests.sh neuronews-staging

      - name: Get deployment status
        run: |
          kubectl get pods -n neuronews-staging
          kubectl get services -n neuronews-staging

  # Job 5: Deploy to production (manual approval required)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure kubectl
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBECONFIG_PRODUCTION }}

      - name: Create namespace if not exists
        run: |
          kubectl create namespace neuronews-prod --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy with canary strategy
        run: |
          chmod +x scripts/canary-deployment.sh
          ./scripts/canary-deployment.sh neuronews-prod ${{ github.sha }}

      - name: Monitor deployment
        run: |
          chmod +x scripts/monitor-deployment.sh
          ./scripts/monitor-deployment.sh neuronews-prod

      - name: Run production smoke tests
        run: |
          chmod +x scripts/smoke-tests.sh
          ./scripts/smoke-tests.sh neuronews-prod

      - name: Notify deployment success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: |
            ✅ NeuroNews production deployment successful!
            Commit: ${{ github.sha }}
            Branch: ${{ github.ref_name }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify deployment failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: |
            ❌ NeuroNews production deployment failed!
            Commit: ${{ github.sha }}
            Branch: ${{ github.ref_name }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Job 6: Update ArgoCD applications (optional GitOps)
  update-gitops:
    name: Update GitOps
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.ref == 'refs/heads/main' && success()
    
    steps:
      - name: Checkout ArgoCD configs
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          path: gitops
          token: ${{ secrets.GITOPS_TOKEN }}

      - name: Update ArgoCD application manifests
        run: |
          cd gitops/argocd/applications
          
          # Update image tags in ArgoCD application specs
          find . -name "*.yaml" -exec sed -i "s|neuronews/.*:.*|neuronews/${{ matrix.service }}:${{ github.sha }}|g" {} \;

      - name: Commit and push changes
        run: |
          cd gitops
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add -A
          git commit -m "Update image tags to ${{ github.sha }}" || exit 0
          git push
