name: Canary Deployment

on:
  workflow_dispatch:
    inputs:
      service:
        description: 'Service to deploy (api, dashboard, scraper, nlp-processor, all)'
        required: true
        default: 'all'
        type: choice
        options:
          - api
          - dashboard
          - scraper
          - nlp-processor
          - all
      image_tag:
        description: 'Image tag to deploy'
        required: true
        default: 'latest'
      traffic_percentage:
        description: 'Initial traffic percentage for canary (1-100)'
        required: true
        default: '10'
        type: number
      auto_promote:
        description: 'Automatically promote if canary succeeds'
        required: false
        default: true
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PRODUCTION_NAMESPACE: neuronews

jobs:
  canary-deploy:
    name: Canary Deployment
    runs-on: ubuntu-latest
    environment:
      name: production-canary
      url: https://canary.neuronews.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure kubectl
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > ~/.kube/config

      - name: Install Argo Rollouts CLI
        run: |
          curl -LO https://github.com/argoproj/argo-rollouts/releases/latest/download/kubectl-argo-rollouts-linux-amd64
          chmod +x kubectl-argo-rollouts-linux-amd64
          sudo mv kubectl-argo-rollouts-linux-amd64 /usr/local/bin/kubectl-argo-rollouts

      - name: Validate inputs
        run: |
          if [ "${{ github.event.inputs.traffic_percentage }}" -lt 1 ] || [ "${{ github.event.inputs.traffic_percentage }}" -gt 100 ]; then
            echo "Traffic percentage must be between 1 and 100"
            exit 1
          fi

      - name: Deploy canary - Single Service
        if: github.event.inputs.service != 'all'
        run: |
          SERVICE="${{ github.event.inputs.service }}"
          IMAGE_TAG="${{ github.event.inputs.image_tag }}"
          TRAFFIC_PERCENT="${{ github.event.inputs.traffic_percentage }}"
          
          echo "Deploying canary for $SERVICE with $TRAFFIC_PERCENT% traffic"
          
          # Update the rollout with new image
          kubectl argo rollouts set image neuronews-$SERVICE-rollout \
            neuronews-$SERVICE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/$SERVICE:$IMAGE_TAG \
            --namespace=${{ env.PRODUCTION_NAMESPACE }}
          
          # Set canary traffic percentage
          kubectl argo rollouts set canary-weight neuronews-$SERVICE-rollout $TRAFFIC_PERCENT \
            --namespace=${{ env.PRODUCTION_NAMESPACE }}
          
          # Wait for canary to be ready
          kubectl argo rollouts wait neuronews-$SERVICE-rollout \
            --for=health \
            --timeout=600s \
            --namespace=${{ env.PRODUCTION_NAMESPACE }}

      - name: Deploy canary - All Services
        if: github.event.inputs.service == 'all'
        run: |
          IMAGE_TAG="${{ github.event.inputs.image_tag }}"
          TRAFFIC_PERCENT="${{ github.event.inputs.traffic_percentage }}"
          SERVICES=("api" "dashboard" "scraper" "nlp-processor")
          
          echo "Deploying canary for all services with $TRAFFIC_PERCENT% traffic"
          
          for SERVICE in "${SERVICES[@]}"; do
            echo "Deploying canary for $SERVICE..."
            
            # Check if rollout exists
            if kubectl get rollout neuronews-$SERVICE-rollout -n ${{ env.PRODUCTION_NAMESPACE }} >/dev/null 2>&1; then
              # Update the rollout with new image
              kubectl argo rollouts set image neuronews-$SERVICE-rollout \
                neuronews-$SERVICE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/$SERVICE:$IMAGE_TAG \
                --namespace=${{ env.PRODUCTION_NAMESPACE }}
              
              # Set canary traffic percentage
              kubectl argo rollouts set canary-weight neuronews-$SERVICE-rollout $TRAFFIC_PERCENT \
                --namespace=${{ env.PRODUCTION_NAMESPACE }}
            else
              echo "Rollout for $SERVICE not found, skipping..."
            fi
          done
          
          # Wait for all canaries to be ready
          for SERVICE in "${SERVICES[@]}"; do
            if kubectl get rollout neuronews-$SERVICE-rollout -n ${{ env.PRODUCTION_NAMESPACE }} >/dev/null 2>&1; then
              echo "Waiting for $SERVICE canary to be ready..."
              kubectl argo rollouts wait neuronews-$SERVICE-rollout \
                --for=health \
                --timeout=600s \
                --namespace=${{ env.PRODUCTION_NAMESPACE }} || true
            fi
          done

      - name: Monitor canary metrics
        id: monitor
        run: |
          echo "Monitoring canary deployment for 5 minutes..."
          
          # Create monitoring script
          cat > monitor_canary.sh << 'EOF'
          #!/bin/bash
          
          NAMESPACE="${{ env.PRODUCTION_NAMESPACE }}"
          SERVICE="${{ github.event.inputs.service }}"
          DURATION=300  # 5 minutes
          INTERVAL=30   # Check every 30 seconds
          
          check_service_health() {
            local service=$1
            local endpoint="https://canary.neuronews.com"
            
            # Check if service responds
            response=$(curl -s -o /dev/null -w "%{http_code}" "$endpoint/health" || echo "000")
            
            if [ "$response" = "200" ]; then
              echo "✅ $service health check passed"
              return 0
            else
              echo "❌ $service health check failed (HTTP $response)"
              return 1
            fi
          }
          
          check_metrics() {
            local service=$1
            
            # Get error rate from metrics (simplified example)
            # In real implementation, you'd query Prometheus/Grafana
            error_rate=$(kubectl top pods -n $NAMESPACE -l app=neuronews-$service,version=canary --no-headers | wc -l)
            
            if [ "$error_rate" -gt 0 ]; then
              echo "✅ $service metrics look good"
              return 0
            else
              echo "⚠️ $service has no canary pods running"
              return 1
            fi
          }
          
          # Monitor loop
          start_time=$(date +%s)
          success_count=0
          total_checks=0
          
          while [ $(($(date +%s) - start_time)) -lt $DURATION ]; do
            echo "🔍 Checking canary health..."
            
            if [ "$SERVICE" = "all" ]; then
              services=("api" "dashboard" "scraper" "nlp-processor")
            else
              services=("$SERVICE")
            fi
            
            check_passed=true
            for svc in "${services[@]}"; do
              if ! check_service_health "$svc" || ! check_metrics "$svc"; then
                check_passed=false
                break
              fi
            done
            
            total_checks=$((total_checks + 1))
            if [ "$check_passed" = true ]; then
              success_count=$((success_count + 1))
            fi
            
            echo "📊 Health checks: $success_count/$total_checks passed"
            sleep $INTERVAL
          done
          
          # Calculate success rate
          success_rate=$((success_count * 100 / total_checks))
          echo "📈 Overall success rate: $success_rate%"
          
          # Export results
          echo "success_rate=$success_rate" >> $GITHUB_OUTPUT
          echo "total_checks=$total_checks" >> $GITHUB_OUTPUT
          echo "success_count=$success_count" >> $GITHUB_OUTPUT
          
          # Return success if >95% success rate
          if [ $success_rate -ge 95 ]; then
            echo "✅ Canary validation passed!"
            exit 0
          else
            echo "❌ Canary validation failed!"
            exit 1
          fi
          EOF
          
          chmod +x monitor_canary.sh
          ./monitor_canary.sh

      - name: Promote canary (Auto)
        if: github.event.inputs.auto_promote == 'true' && steps.monitor.outcome == 'success'
        run: |
          echo "🚀 Auto-promoting canary deployment..."
          
          if [ "${{ github.event.inputs.service }}" = "all" ]; then
            services=("api" "dashboard" "scraper" "nlp-processor")
          else
            services=("${{ github.event.inputs.service }}")
          fi
          
          for SERVICE in "${services[@]}"; do
            if kubectl get rollout neuronews-$SERVICE-rollout -n ${{ env.PRODUCTION_NAMESPACE }} >/dev/null 2>&1; then
              echo "Promoting $SERVICE to 100%..."
              kubectl argo rollouts promote neuronews-$SERVICE-rollout \
                --namespace=${{ env.PRODUCTION_NAMESPACE }}
              
              # Wait for promotion to complete
              kubectl argo rollouts wait neuronews-$SERVICE-rollout \
                --for=completion \
                --timeout=600s \
                --namespace=${{ env.PRODUCTION_NAMESPACE }}
            fi
          done

      - name: Rollback canary (Auto)
        if: steps.monitor.outcome == 'failure'
        run: |
          echo "🔄 Auto-rolling back canary deployment..."
          
          if [ "${{ github.event.inputs.service }}" = "all" ]; then
            services=("api" "dashboard" "scraper" "nlp-processor")
          else
            services=("${{ github.event.inputs.service }}")
          fi
          
          for SERVICE in "${services[@]}"; do
            if kubectl get rollout neuronews-$SERVICE-rollout -n ${{ env.PRODUCTION_NAMESPACE }} >/dev/null 2>&1; then
              echo "Rolling back $SERVICE..."
              kubectl argo rollouts abort neuronews-$SERVICE-rollout \
                --namespace=${{ env.PRODUCTION_NAMESPACE }}
              
              kubectl argo rollouts undo neuronews-$SERVICE-rollout \
                --namespace=${{ env.PRODUCTION_NAMESPACE }}
            fi
          done

      - name: Generate deployment report
        if: always()
        run: |
          cat > deployment-report.md << EOF
          # Canary Deployment Report
          
          ## Deployment Details
          - **Service(s)**: ${{ github.event.inputs.service }}
          - **Image Tag**: ${{ github.event.inputs.image_tag }}
          - **Traffic Percentage**: ${{ github.event.inputs.traffic_percentage }}%
          - **Auto Promote**: ${{ github.event.inputs.auto_promote }}
          - **Status**: ${{ job.status }}
          
          ## Monitoring Results
          - **Success Rate**: ${{ steps.monitor.outputs.success_rate }}%
          - **Total Checks**: ${{ steps.monitor.outputs.total_checks }}
          - **Successful Checks**: ${{ steps.monitor.outputs.success_count }}
          
          ## Next Steps
          EOF
          
          if [ "${{ steps.monitor.outcome }}" = "success" ]; then
            if [ "${{ github.event.inputs.auto_promote }}" = "true" ]; then
              echo "✅ Canary was automatically promoted to production." >> deployment-report.md
            else
              echo "✅ Canary validation passed. Manual promotion required." >> deployment-report.md
              echo "Run: \`kubectl argo rollouts promote neuronews-\$SERVICE-rollout -n ${{ env.PRODUCTION_NAMESPACE }}\`" >> deployment-report.md
            fi
          else
            echo "❌ Canary validation failed. Automatic rollback initiated." >> deployment-report.md
          fi
          
          echo "" >> deployment-report.md
          echo "**Deployment ID**: ${{ github.run_id }}" >> deployment-report.md
          echo "**Timestamp**: $(date -u +%Y-%m-%dT%H:%M:%SZ)" >> deployment-report.md

      - name: Upload deployment report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: canary-deployment-report
          path: deployment-report.md

      - name: Notify deployment status
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          text: |
            🔄 **Canary Deployment ${{ job.status }}**
            
            📊 **Details:**
            • Service(s): ${{ github.event.inputs.service }}
            • Image: ${{ github.event.inputs.image_tag }}
            • Traffic: ${{ github.event.inputs.traffic_percentage }}%
            • Success Rate: ${{ steps.monitor.outputs.success_rate }}%
            
            ${{ steps.monitor.outcome == 'success' && '✅ Validation passed' || '❌ Validation failed' }}
            ${{ github.event.inputs.auto_promote == 'true' && steps.monitor.outcome == 'success' && '🚀 Auto-promoted' || '' }}
            ${{ steps.monitor.outcome == 'failure' && '🔄 Auto-rolled back' || '' }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
