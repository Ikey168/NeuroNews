# Docker Compose for NeuroNews Development & Testing
version: '3.8'

services:
  # Main application service
  app:
    build:
      context: .
      target: development
    volumes:
      - .:/home/neuronews/app
      - /home/neuronews/app/__pycache__
    environment:
      - PYTHONPATH=/home/neuronews/app
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=neuronews_dev
      - DB_USER=neuronews
      - DB_PASSWORD=dev_password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - neuronews-network
    command: tail -f /dev/null  # Keep container running for development

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: neuronews_dev
      POSTGRES_USER: neuronews
      POSTGRES_PASSWORD: dev_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./deployment/sql:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U neuronews -d neuronews_dev"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - neuronews-network

  # Redis for caching
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - neuronews-network

  # MinIO for S3-compatible storage (for testing)
  minio:
    image: minio/minio:latest
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - neuronews-network

volumes:
  postgres_data:
  minio_data:

networks:
  neuronews-network:
    driver: bridge
