---
# Prometheus rules for carbon cost tracking and kgCO2e metrics
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: neuronews-carbon-tracking
  namespace: monitoring
  labels:
    app: prometheus
    component: carbon-tracking
    purpose: finops
spec:
  groups:
  - name: neuronews.carbon.pipeline
    interval: 30s
    rules:
    # Carbon emissions per pipeline (kgCO2e)
    - record: neuronews:carbon:pipeline_emissions_kg_co2e
      expr: |
        (
          sum by (pipeline) (
            (
              container_spec_cpu_period{container!="POD",container!=""} > 0
            ) * on(pod) group_left(pipeline) 
            (
              kube_pod_labels{label_pipeline!=""}
            ) * 
            (
              opencost_carbon_intensity_grams_co2e_per_kwh / 1000  # Convert to kg
            ) *
            (
              opencost_node_power_watts / 1000  # Convert to kW
            ) *
            (
              container_cpu_usage_seconds_total / container_spec_cpu_period
            )
          )
        ) or vector(0)

    # Carbon emissions per namespace (kgCO2e)  
    - record: neuronews:carbon:namespace_emissions_kg_co2e
      expr: |
        sum by (namespace) (
          (
            container_spec_cpu_period{container!="POD",container!=""} > 0
          ) * on(pod) group_left(namespace)
          (
            kube_pod_info
          ) *
          (
            opencost_carbon_intensity_grams_co2e_per_kwh / 1000
          ) *
          (
            opencost_node_power_watts / 1000
          ) *
          (
            container_cpu_usage_seconds_total / container_spec_cpu_period
          )
        ) or vector(0)

    # Carbon cost per pipeline (USD)
    - record: neuronews:carbon:pipeline_cost_usd
      expr: |
        neuronews:carbon:pipeline_emissions_kg_co2e * 
        (opencost_carbon_price_per_tonne / 1000)  # Convert tonne to kg

    # Carbon intensity by node type  
    - record: neuronews:carbon:node_intensity_by_type
      expr: |
        avg by (node_lifecycle, instance_type) (
          opencost_carbon_intensity_grams_co2e_per_kwh 
          * on(node) group_left(node_lifecycle, instance_type)
          kube_node_labels
        )

  - name: neuronews.carbon.cluster
    interval: 1m
    rules:
    # Total cluster carbon emissions (kgCO2e)
    - record: neuronews:carbon:cluster_total_emissions_kg_co2e
      expr: |
        sum(
          opencost_carbon_emissions_kg_co2e
        ) or vector(0)

    # Total cluster carbon cost (USD)
    - record: neuronews:carbon:cluster_total_cost_usd
      expr: |
        sum(
          opencost_carbon_cost_usd
        ) or vector(0)

    # Carbon emissions by instance type
    - record: neuronews:carbon:instance_type_emissions
      expr: |
        sum by (instance_type) (
          opencost_carbon_emissions_kg_co2e
          * on(node) group_left(instance_type)
          kube_node_labels{label_node_kubernetes_io_instance_type!=""}
        )

    # Carbon efficiency (kgCO2e per CPU hour)
    - record: neuronews:carbon:efficiency_kg_co2e_per_cpu_hour
      expr: |
        (
          neuronews:carbon:cluster_total_emissions_kg_co2e /
          sum(
            kube_node_status_allocatable{resource="cpu"} * 
            on(node) kube_node_info
          )
        ) or vector(0)

    # Carbon emissions trend (hourly rate)
    - record: neuronews:carbon:hourly_emissions_rate
      expr: |
        rate(neuronews:carbon:cluster_total_emissions_kg_co2e[1h]) * 3600

  - name: neuronews.carbon.workload
    interval: 30s  
    rules:
    # Carbon emissions per workload (kgCO2e)
    - record: neuronews:carbon:workload_emissions_kg_co2e
      expr: |
        sum by (workload, workload_type) (
          (
            opencost_carbon_emissions_kg_co2e
          ) * on(pod) group_left(workload, workload_type)
          (
            label_replace(
              kube_pod_info,
              "workload",
              "$1", 
              "created_by_name", 
              "(.+)"
            ) * on(pod) group_left(workload_type)
            label_replace(
              kube_pod_info,
              "workload_type",
              "$1",
              "created_by_kind",
              "(.+)"
            )
          )
        )

    # Carbon emissions by priority class
    - record: neuronews:carbon:priority_class_emissions
      expr: |
        sum by (priority_class) (
          opencost_carbon_emissions_kg_co2e
          * on(pod) group_left(priority_class)
          kube_pod_info{priority_class!=""}
        )

    # Carbon emissions by node lifecycle (on-demand vs spot)
    - record: neuronews:carbon:node_lifecycle_emissions
      expr: |
        sum by (node_lifecycle) (
          opencost_carbon_emissions_kg_co2e
          * on(node) group_left(node_lifecycle)
          kube_node_labels{label_node_lifecycle!=""}
        )

  - name: neuronews.carbon.alerts
    interval: 30s
    rules:
    # High carbon emissions alert
    - alert: HighCarbonEmissions
      expr: neuronews:carbon:hourly_emissions_rate > 5.0  # > 5kg CO2e per hour
      for: 10m
      labels:
        severity: warning
        component: carbon-tracking
      annotations:
        summary: "High carbon emissions detected"
        description: "Cluster carbon emissions rate is {{ $value }} kgCO2e/hour"
        impact: "Environmental impact and carbon costs are elevated"
        runbook_url: "https://docs.neuronews.ai/runbooks/carbon-optimization"

    # Carbon cost threshold alert
    - alert: CarbonCostThreshold
      expr: neuronews:carbon:cluster_total_cost_usd > 100  # > $100/day
      for: 15m
      labels:
        severity: info
        component: carbon-tracking
      annotations:
        summary: "Carbon cost threshold exceeded"
        description: "Daily carbon cost is ${{ $value }}"
        impact: "Carbon accounting costs are above budget threshold"

    # Carbon efficiency degradation
    - alert: CarbonEfficiencyDegradation
      expr: |
        (
          neuronews:carbon:efficiency_kg_co2e_per_cpu_hour - 
          neuronews:carbon:efficiency_kg_co2e_per_cpu_hour offset 1h
        ) > 0.1
      for: 30m
      labels:
        severity: info
        component: carbon-tracking
      annotations:
        summary: "Carbon efficiency degrading"
        description: "Carbon efficiency decreased by {{ $value }} kgCO2e per CPU hour"
        impact: "Resource utilization efficiency is declining"

    # Pipeline carbon impact tracking
    - alert: PipelineCarbonImpact
      expr: neuronews:carbon:pipeline_emissions_kg_co2e > 2.0  # > 2kg CO2e per pipeline
      for: 5m
      labels:
        severity: info
        component: carbon-tracking
      annotations:
        summary: "Pipeline {{ $labels.pipeline }} has high carbon impact"
        description: "Pipeline carbon emissions: {{ $value }} kgCO2e"
        impact: "Consider optimizing pipeline resource usage"

  - name: neuronews.carbon.sustainability
    interval: 1m
    rules:
    # Renewable energy usage percentage
    - record: neuronews:carbon:renewable_energy_percentage
      expr: |
        avg(
          opencost_renewable_energy_percentage
        ) or vector(45.2)  # Default to us-east-1 renewable percentage

    # Carbon savings from spot instances
    - record: neuronews:carbon:spot_savings_kg_co2e
      expr: |
        (
          neuronews:carbon:node_lifecycle_emissions{node_lifecycle="on-demand"} -
          neuronews:carbon:node_lifecycle_emissions{node_lifecycle="spot"}
        ) or vector(0)

    # Carbon intensity comparison vs cloud average
    - record: neuronews:carbon:intensity_vs_cloud_average
      expr: |
        (
          avg(opencost_carbon_intensity_grams_co2e_per_kwh) /
          475.0  # Global cloud average gCO2e/kWh
        ) or vector(1.0)

    # Sustainability score (0-100, higher is better)
    - record: neuronews:carbon:sustainability_score
      expr: |
        100 * (
          (neuronews:carbon:renewable_energy_percentage / 100) * 0.4 +
          (1 - neuronews:carbon:intensity_vs_cloud_average) * 0.3 +
          (
            neuronews:carbon:spot_savings_kg_co2e / 
            (neuronews:carbon:cluster_total_emissions_kg_co2e + 1)
          ) * 0.3
        )

  - name: neuronews.carbon.reporting
    interval: 5m
    rules:
    # Daily carbon emissions
    - record: neuronews:carbon:daily_emissions_kg_co2e
      expr: |
        increase(neuronews:carbon:cluster_total_emissions_kg_co2e[24h])

    # Monthly carbon emissions projection
    - record: neuronews:carbon:monthly_emissions_projection_kg_co2e
      expr: |
        neuronews:carbon:daily_emissions_kg_co2e * 30

    # Carbon emissions by hour of day (for optimization insights)
    - record: neuronews:carbon:hourly_pattern
      expr: |
        avg_over_time(
          neuronews:carbon:hourly_emissions_rate[7d]
        ) by (hour)

    # Carbon cost per pipeline feature
    - record: neuronews:carbon:cost_per_pipeline_feature
      expr: |
        (
          neuronews:carbon:pipeline_cost_usd{pipeline="ingest"} /
          scalar(rate(neuronews_articles_ingested_total[1h]) * 3600)
        ) or vector(0)

    # Carbon ROI from optimization efforts
    - record: neuronews:carbon:optimization_roi
      expr: |
        (
          (
            neuronews:carbon:cluster_total_emissions_kg_co2e offset 7d
          ) - neuronews:carbon:cluster_total_emissions_kg_co2e
        ) / 
        (
          neuronews:carbon:cluster_total_emissions_kg_co2e offset 7d + 1
        )
