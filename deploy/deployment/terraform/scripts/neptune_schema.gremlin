// Neptune Graph Schema for NeuroNews
// This schema defines the core entities and relationships for the news knowledge graph

// Property Keys
// People
schema.propertyKey('name').Text().single().create()
schema.propertyKey('title').Text().single().create()
schema.propertyKey('age').Int().single().create()
schema.propertyKey('nationality').Text().single().create()
schema.propertyKey('occupation').Text().multiple().create()
schema.propertyKey('politicalAffiliation').Text().single().create()
schema.propertyKey('biography').Text().single().create()
schema.propertyKey('imageUrl').Text().single().create()
schema.propertyKey('socialMediaHandles').Text().multiple().create()
schema.propertyKey('lastUpdated').Date().single().create()

// Organizations
schema.propertyKey('orgName').Text().single().create()
schema.propertyKey('orgType').Text().single().create()
schema.propertyKey('founded').Date().single().create()
schema.propertyKey('headquarters').Text().single().create()
schema.propertyKey('industry').Text().multiple().create()
schema.propertyKey('revenue').Decimal().single().create()
schema.propertyKey('employeeCount').Int().single().create()
schema.propertyKey('website').Text().single().create()
schema.propertyKey('stockSymbol').Text().single().create()
schema.propertyKey('description').Text().single().create()

// Events
schema.propertyKey('eventName').Text().single().create()
schema.propertyKey('eventType').Text().single().create()
schema.propertyKey('startDate').Date().single().create()
schema.propertyKey('endDate').Date().single().create()
schema.propertyKey('location').Text().single().create()
schema.propertyKey('impact').Text().single().create()
schema.propertyKey('summary').Text().single().create()
schema.propertyKey('keywords').Text().multiple().create()
schema.propertyKey('sentiment').Double().single().create()
schema.propertyKey('importance').Int().single().create()

// Articles
schema.propertyKey('headline').Text().single().create()
schema.propertyKey('url').Text().single().create()
schema.propertyKey('publishDate').Date().single().create()
schema.propertyKey('author').Text().multiple().create()
schema.propertyKey('content').Text().single().create()
schema.propertyKey('source').Text().single().create()
schema.propertyKey('category').Text().multiple().create()
schema.propertyKey('tags').Text().multiple().create()

// Vertex Labels
schema.vertexLabel('Person').properties(
    'name', 'title', 'age', 'nationality', 'occupation',
    'politicalAffiliation', 'biography', 'imageUrl',
    'socialMediaHandles', 'lastUpdated'
).create()

schema.vertexLabel('Organization').properties(
    'orgName', 'orgType', 'founded', 'headquarters',
    'industry', 'revenue', 'employeeCount', 'website',
    'stockSymbol', 'description'
).create()

schema.vertexLabel('Event').properties(
    'eventName', 'eventType', 'startDate', 'endDate',
    'location', 'impact', 'summary', 'keywords',
    'sentiment', 'importance'
).create()

schema.vertexLabel('Article').properties(
    'headline', 'url', 'publishDate', 'author',
    'content', 'source', 'category', 'tags'
).create()

// Edge Labels
// Person -> Person relationships
schema.edgeLabel('KNOWS').connection('Person', 'Person').create()
schema.edgeLabel('REPORTS_TO').connection('Person', 'Person').create()
schema.edgeLabel('COLLABORATES_WITH').connection('Person', 'Person').create()

// Person -> Organization relationships
schema.edgeLabel('WORKS_FOR').properties('role', 'startDate').connection('Person', 'Organization').create()
schema.edgeLabel('INVESTED_IN').properties('amount', 'date').connection('Person', 'Organization').create()
schema.edgeLabel('FOUNDED').properties('date').connection('Person', 'Organization').create()

// Person -> Event relationships
schema.edgeLabel('PARTICIPATED_IN').properties('role').connection('Person', 'Event').create()
schema.edgeLabel('ORGANIZED').connection('Person', 'Event').create()
schema.edgeLabel('COMMENTED_ON').properties('sentiment', 'date').connection('Person', 'Event').create()

// Organization -> Event relationships
schema.edgeLabel('HOSTED').connection('Organization', 'Event').create()
schema.edgeLabel('SPONSORED').properties('amount').connection('Organization', 'Event').create()
schema.edgeLabel('AFFECTED_BY').properties('impact').connection('Organization', 'Event').create()

// Article relationships
schema.edgeLabel('MENTIONS_PERSON').properties('sentiment', 'count').connection('Article', 'Person').create()
schema.edgeLabel('MENTIONS_ORG').properties('sentiment', 'count').connection('Article', 'Organization').create()
schema.edgeLabel('COVERS_EVENT').properties('prominence').connection('Article', 'Event').create()
schema.edgeLabel('CITES').connection('Article', 'Article').create()

// Organization relationships
schema.edgeLabel('SUBSIDIARY_OF').connection('Organization', 'Organization').create()
schema.edgeLabel('PARTNERS_WITH').properties('partnership_type', 'start_date').connection('Organization', 'Organization').create()
schema.edgeLabel('COMPETES_WITH').connection('Organization', 'Organization').create()

// Indexes
schema.vertexLabel('Person').index('by_name').materialized().by('name').add()
schema.vertexLabel('Organization').index('by_orgName').materialized().by('orgName').add()
schema.vertexLabel('Event').index('by_eventName').materialized().by('eventName').add()
schema.vertexLabel('Article').index('by_headline').materialized().by('headline').add()

// Example Traversals

// Find all articles mentioning a person and their associated organizations
g.V().hasLabel('Person').has('name', 'John Doe')
  .in('MENTIONS_PERSON').hasLabel('Article')
  .out('MENTIONS_ORG').hasLabel('Organization')
  .path().by('name').by('headline').by('orgName')

// Find events connected to a specific organization and their participants
g.V().hasLabel('Organization').has('orgName', 'TechCorp')
  .out('HOSTED').hasLabel('Event')
  .in('PARTICIPATED_IN').hasLabel('Person')
  .path().by('orgName').by('eventName').by('name')

// Find connections between people through common organizations or events
g.V().hasLabel('Person').has('name', 'Jane Smith')
  .union(
    out('WORKS_FOR').in('WORKS_FOR'),
    out('PARTICIPATED_IN').in('PARTICIPATED_IN')
  ).hasLabel('Person')
  .path().by('name')