#!/bin/bash

# DoD Verification Script for Issue #371
# Contract observability & alerting

set -e

echo "üîç Verifying Issue #371: Contract observability & alerting"
echo "=============================================================="

# Check 1: Verify metrics module exists with required metrics
echo ""
echo "‚úÖ Check 1: Contract metrics module exists"
if [ -f "services/ingest/metrics.py" ]; then
    echo "   ‚úì services/ingest/metrics.py exists"
else
    echo "   ‚ùå services/ingest/metrics.py missing"
    exit 1
fi

# Check metrics definitions
echo "   Checking required metrics definitions..."
python3 -c "
import sys
sys.path.insert(0, '/workspaces/NeuroNews')

try:
    from services.ingest.metrics import (
        contracts_validation_fail_total,
        contracts_breaking_change_total,
        contract_metrics
    )
    print('   ‚úì contracts_validation_fail_total metric defined')
    print('   ‚úì contracts_breaking_change_total metric defined') 
    print('   ‚úì contract_metrics collector available')
except ImportError as e:
    print(f'   ‚ùå Required metrics not found: {e}')
    sys.exit(1)
"

# Check 2: Verify Prometheus alert rules exist
echo ""
echo "‚úÖ Check 2: Prometheus alert rules configuration"
if [ -f "k8s/monitoring/prometheus-rules-contracts.yaml" ]; then
    echo "   ‚úì prometheus-rules-contracts.yaml exists"
else
    echo "   ‚ùå prometheus-rules-contracts.yaml missing"
    exit 1
fi

# Check alert rules content
echo "   Checking alert rules content..."
if grep -q "ContractValidationFailureRateHigh" k8s/monitoring/prometheus-rules-contracts.yaml; then
    echo "   ‚úì Failure rate alert rule found"
else
    echo "   ‚ùå Failure rate alert rule missing"
    exit 1
fi

if grep -q "ContractBreakingChangeDetected" k8s/monitoring/prometheus-rules-contracts.yaml; then
    echo "   ‚úì Breaking change alert rule found"
else
    echo "   ‚ùå Breaking change alert rule missing"
    exit 1
fi

# Check threshold conditions
if grep -q "> 1" k8s/monitoring/prometheus-rules-contracts.yaml; then
    echo "   ‚úì >1% failure rate threshold configured"
else
    echo "   ‚ùå >1% failure rate threshold missing"
    exit 1
fi

if grep -q "15m" k8s/monitoring/prometheus-rules-contracts.yaml; then
    echo "   ‚úì 15-minute time window configured"
else
    echo "   ‚ùå 15-minute time window missing"
    exit 1
fi

# Check 3: Verify Grafana dashboard configuration
echo ""
echo "‚úÖ Check 3: Grafana dashboard configuration"
if [ -f "k8s/monitoring/grafana-dashboard-contracts.json" ]; then
    echo "   ‚úì grafana-dashboard-contracts.json exists"
else
    echo "   ‚ùå grafana-dashboard-contracts.json missing"
    exit 1
fi

# Check dashboard content
echo "   Checking dashboard panels..."
if grep -q "pipeline" k8s/monitoring/grafana-dashboard-contracts.json; then
    echo "   ‚úì Pipeline filtering configured"
else
    echo "   ‚ùå Pipeline filtering missing"
    exit 1
fi

if grep -q "source_id" k8s/monitoring/grafana-dashboard-contracts.json; then
    echo "   ‚úì Source ID filtering configured"
else
    echo "   ‚ùå Source ID filtering missing"
    exit 1
fi

# Check 4: Verify alerting configuration
echo ""
echo "‚úÖ Check 4: Alerting configuration (Slack/email)"
if [ -f "k8s/monitoring/alertmanager-contracts-config.yaml" ]; then
    echo "   ‚úì alertmanager-contracts-config.yaml exists"
else
    echo "   ‚ùå alertmanager-contracts-config.yaml missing"
    exit 1
fi

# Check alerting destinations
if grep -q "slack" k8s/monitoring/alertmanager-contracts-config.yaml; then
    echo "   ‚úì Slack alerting configured"
else
    echo "   ‚ùå Slack alerting missing"
    exit 1
fi

if grep -q "email" k8s/monitoring/alertmanager-contracts-config.yaml; then
    echo "   ‚úì Email alerting configured"
else
    echo "   ‚ùå Email alerting missing"
    exit 1
fi

# Check 5: Test metrics functionality
echo ""
echo "‚úÖ Check 5: Testing metrics functionality"
python3 -c "
import sys
import time
sys.path.insert(0, '/workspaces/NeuroNews')

try:
    from services.ingest.metrics import contract_metrics
    
    # Test validation failure recording
    contract_metrics.record_validation_failure('test-pipeline', 'test-source', 'test-schema', 'test-error')
    print('   ‚úì Validation failure recording works')
    
    # Test breaking change recording
    contract_metrics.record_breaking_change('test-pipeline', 'test-schema', 'field_removed', 'ci')
    print('   ‚úì Breaking change recording works')
    
    # Test validation success recording
    contract_metrics.record_validation_success('test-pipeline', 'test-source', 'test-schema')
    print('   ‚úì Validation success recording works')
    
    # Test latency recording
    contract_metrics.record_validation_latency(50.0, 'test-pipeline', 'test-source', 'test-schema')
    print('   ‚úì Validation latency recording works')
    
    # Test DLQ recording
    contract_metrics.record_dlq_message('test-pipeline', 'test-source', 'test-schema', 'validation_failed')
    print('   ‚úì DLQ message recording works')
    
    print('   ‚úì All metrics recording functions operational')
    
except Exception as e:
    print(f'   ‚ùå Metrics functionality test failed: {e}')
    sys.exit(1)
"

# Check 6: Verify integration with existing contracts
echo ""
echo "‚úÖ Check 6: Integration with existing contract validation"
if grep -q "contract_metrics" services/ingest/common/contracts.py; then
    echo "   ‚úì Prometheus metrics integrated with existing validation"
else
    echo "   ‚ùå Prometheus metrics not integrated with existing validation"
    exit 1
fi

# Check method signature updates
if grep -q "pipeline.*source_id" services/ingest/common/contracts.py; then
    echo "   ‚úì Validation methods updated with pipeline/source_id parameters"
else
    echo "   ‚ùå Validation methods not updated for enhanced metrics"
    exit 1
fi

# Check 7: Test demo script
echo ""
echo "‚úÖ Check 7: Demo script functionality"
if [ -f "demo_contract_observability.py" ]; then
    echo "   ‚úì demo_contract_observability.py exists"
else
    echo "   ‚ùå demo_contract_observability.py missing"
    exit 1
fi

# Quick demo test
echo "   Running quick demo validation..."
python3 -c "
import sys
sys.path.insert(0, '/workspaces/NeuroNews')

try:
    from demo_contract_observability import simulate_validation_success, simulate_validation_failure
    
    # Test simulation functions
    simulate_validation_success()
    simulate_validation_failure()
    
    print('   ‚úì Demo script functions work correctly')
    
except Exception as e:
    print(f'   ‚ùå Demo script test failed: {e}')
    sys.exit(1)
"

# Check 8: Verify metrics export capability
echo ""
echo "‚úÖ Check 8: Prometheus metrics export"
python3 -c "
import sys
sys.path.insert(0, '/workspaces/NeuroNews')

try:
    from services.ingest.metrics import get_contract_metrics, get_content_type
    
    # Test metrics export
    metrics_text = get_contract_metrics()
    content_type = get_content_type()
    
    if b'contracts_validation' in metrics_text:
        print('   ‚úì Contract validation metrics exported')
    else:
        print('   ‚ùå Contract validation metrics not found in export')
        sys.exit(1)
    
    if b'contracts_breaking_change' in metrics_text:
        print('   ‚úì Breaking change metrics exported')
    else:
        print('   ‚ùå Breaking change metrics not found in export')
        sys.exit(1)
    
    if 'text/plain' in content_type:
        print('   ‚úì Correct content type for Prometheus')
    else:
        print('   ‚ùå Incorrect content type for Prometheus')
        sys.exit(1)
    
    print('   ‚úì Prometheus metrics export working correctly')
    
except Exception as e:
    print(f'   ‚ùå Metrics export test failed: {e}')
    sys.exit(1)
"

echo ""
echo "üìã DoD Requirements Summary:"
echo "‚úÖ contracts_validation_fail_total metric implemented and functional"
echo "‚úÖ contracts_breaking_change_total metric implemented and functional"
echo "‚úÖ Prometheus alert rules configured (>1% failure rate over 15m, breaking changes)"
echo "‚úÖ Grafana dashboard shows failures by pipeline and source_id"
echo "‚úÖ Alerts route to Slack and email via Alertmanager"
echo "‚úÖ Integration with existing contract validation infrastructure"
echo "‚úÖ Comprehensive metrics collection (latency, DLQ, compatibility checks)"
echo "‚úÖ Demo script demonstrates all observability capabilities"
echo ""
echo "üéâ Issue #371 implementation complete and DoD verified!"
echo ""
echo "‚ÑπÔ∏è  Next steps for deployment:"
echo "   1. Apply Prometheus rules: kubectl apply -f k8s/monitoring/prometheus-rules-contracts.yaml"
echo "   2. Configure Alertmanager: kubectl apply -f k8s/monitoring/alertmanager-contracts-config.yaml"
echo "   3. Import Grafana dashboard from k8s/monitoring/grafana-dashboard-contracts.json"
echo "   4. Set environment variables for Slack webhook and SMTP configuration"
echo "   5. Update production pipelines to use enhanced validation methods"
